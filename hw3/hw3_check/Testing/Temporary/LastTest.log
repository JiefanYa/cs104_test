Start testing: Feb 11 20:51 PST
----------------------------------------------------------
1/110 Testing: ListInsertBack.OneItemAdd
1/110 Test: ListInsertBack.OneItemAdd
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertBack.OneItemAdd"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertBack.OneItemAdd" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8430== Memcheck, a memory error detector
==8430== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8430== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8430== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertBack.OneItemAdd
==8430== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertBack.OneItemAdd
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertBack
[ RUN      ] ListInsertBack.OneItemAdd
[       OK ] ListInsertBack.OneItemAdd (8 ms)
[----------] 1 test from ListInsertBack (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (35 ms total)
[  PASSED  ] 1 test.
==8430== 
==8430== HEAP SUMMARY:
==8430==     in use at exit: 72,704 bytes in 1 blocks
==8430==   total heap usage: 419 allocs, 418 frees, 135,403 bytes allocated
==8430== 
==8430== LEAK SUMMARY:
==8430==    definitely lost: 0 bytes in 0 blocks
==8430==    indirectly lost: 0 bytes in 0 blocks
==8430==      possibly lost: 0 bytes in 0 blocks
==8430==    still reachable: 0 bytes in 0 blocks
==8430==         suppressed: 72,704 bytes in 1 blocks
==8430== 
==8430== For counts of detected and suppressed errors, rerun with: -v
==8430== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListInsertBack.OneItemAdd" end time: Feb 11 20:51 PST
"ListInsertBack.OneItemAdd" time elapsed: 00:00:00
----------------------------------------------------------

2/110 Testing: ListInsertFront.OneItemAdd
2/110 Test: ListInsertFront.OneItemAdd
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertFront.OneItemAdd"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertFront.OneItemAdd" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8431== Memcheck, a memory error detector
==8431== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8431== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8431== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertFront.OneItemAdd
==8431== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertFront.OneItemAdd
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertFront
[ RUN      ] ListInsertFront.OneItemAdd
[       OK ] ListInsertFront.OneItemAdd (9 ms)
[----------] 1 test from ListInsertFront (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (35 ms total)
[  PASSED  ] 1 test.
==8431== 
==8431== HEAP SUMMARY:
==8431==     in use at exit: 72,704 bytes in 1 blocks
==8431==   total heap usage: 419 allocs, 418 frees, 135,410 bytes allocated
==8431== 
==8431== LEAK SUMMARY:
==8431==    definitely lost: 0 bytes in 0 blocks
==8431==    indirectly lost: 0 bytes in 0 blocks
==8431==      possibly lost: 0 bytes in 0 blocks
==8431==    still reachable: 0 bytes in 0 blocks
==8431==         suppressed: 72,704 bytes in 1 blocks
==8431== 
==8431== For counts of detected and suppressed errors, rerun with: -v
==8431== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListInsertFront.OneItemAdd" end time: Feb 11 20:51 PST
"ListInsertFront.OneItemAdd" time elapsed: 00:00:00
----------------------------------------------------------

3/110 Testing: ListInsert.EmptyString
3/110 Test: ListInsert.EmptyString
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsert.EmptyString"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsert.EmptyString" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8432== Memcheck, a memory error detector
==8432== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8432== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8432== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsert.EmptyString
==8432== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsert.EmptyString
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsert
[ RUN      ] ListInsert.EmptyString
[       OK ] ListInsert.EmptyString (9 ms)
[----------] 1 test from ListInsert (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (35 ms total)
[  PASSED  ] 1 test.
==8432== 
==8432== HEAP SUMMARY:
==8432==     in use at exit: 72,704 bytes in 1 blocks
==8432==   total heap usage: 419 allocs, 418 frees, 135,382 bytes allocated
==8432== 
==8432== LEAK SUMMARY:
==8432==    definitely lost: 0 bytes in 0 blocks
==8432==    indirectly lost: 0 bytes in 0 blocks
==8432==      possibly lost: 0 bytes in 0 blocks
==8432==    still reachable: 0 bytes in 0 blocks
==8432==         suppressed: 72,704 bytes in 1 blocks
==8432== 
==8432== For counts of detected and suppressed errors, rerun with: -v
==8432== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListInsert.EmptyString" end time: Feb 11 20:51 PST
"ListInsert.EmptyString" time elapsed: 00:00:00
----------------------------------------------------------

4/110 Testing: ListInsertBack.ThreeItemAdd
4/110 Test: ListInsertBack.ThreeItemAdd
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertBack.ThreeItemAdd"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertBack.ThreeItemAdd" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8433== Memcheck, a memory error detector
==8433== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8433== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8433== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertBack.ThreeItemAdd
==8433== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertBack.ThreeItemAdd
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertBack
[ RUN      ] ListInsertBack.ThreeItemAdd
[       OK ] ListInsertBack.ThreeItemAdd (13 ms)
[----------] 1 test from ListInsertBack (18 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (40 ms total)
[  PASSED  ] 1 test.
==8433== 
==8433== HEAP SUMMARY:
==8433==     in use at exit: 72,704 bytes in 1 blocks
==8433==   total heap usage: 422 allocs, 421 frees, 136,050 bytes allocated
==8433== 
==8433== LEAK SUMMARY:
==8433==    definitely lost: 0 bytes in 0 blocks
==8433==    indirectly lost: 0 bytes in 0 blocks
==8433==      possibly lost: 0 bytes in 0 blocks
==8433==    still reachable: 0 bytes in 0 blocks
==8433==         suppressed: 72,704 bytes in 1 blocks
==8433== 
==8433== For counts of detected and suppressed errors, rerun with: -v
==8433== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListInsertBack.ThreeItemAdd" end time: Feb 11 20:51 PST
"ListInsertBack.ThreeItemAdd" time elapsed: 00:00:00
----------------------------------------------------------

5/110 Testing: ListInsertFront.ThreeItemAdd
5/110 Test: ListInsertFront.ThreeItemAdd
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertFront.ThreeItemAdd"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertFront.ThreeItemAdd" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8434== Memcheck, a memory error detector
==8434== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8434== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8434== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertFront.ThreeItemAdd
==8434== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertFront.ThreeItemAdd
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertFront
[ RUN      ] ListInsertFront.ThreeItemAdd
[       OK ] ListInsertFront.ThreeItemAdd (14 ms)
[----------] 1 test from ListInsertFront (19 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (41 ms total)
[  PASSED  ] 1 test.
==8434== 
==8434== HEAP SUMMARY:
==8434==     in use at exit: 72,704 bytes in 1 blocks
==8434==   total heap usage: 422 allocs, 421 frees, 136,057 bytes allocated
==8434== 
==8434== LEAK SUMMARY:
==8434==    definitely lost: 0 bytes in 0 blocks
==8434==    indirectly lost: 0 bytes in 0 blocks
==8434==      possibly lost: 0 bytes in 0 blocks
==8434==    still reachable: 0 bytes in 0 blocks
==8434==         suppressed: 72,704 bytes in 1 blocks
==8434== 
==8434== For counts of detected and suppressed errors, rerun with: -v
==8434== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListInsertFront.ThreeItemAdd" end time: Feb 11 20:51 PST
"ListInsertFront.ThreeItemAdd" time elapsed: 00:00:00
----------------------------------------------------------

6/110 Testing: ListInsert.FrontThenBack
6/110 Test: ListInsert.FrontThenBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsert.FrontThenBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsert.FrontThenBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8435== Memcheck, a memory error detector
==8435== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8435== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8435== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsert.FrontThenBack
==8435== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsert.FrontThenBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsert
[ RUN      ] ListInsert.FrontThenBack
[       OK ] ListInsert.FrontThenBack (12 ms)
[----------] 1 test from ListInsert (16 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (39 ms total)
[  PASSED  ] 1 test.
==8435== 
==8435== HEAP SUMMARY:
==8435==     in use at exit: 72,704 bytes in 1 blocks
==8435==   total heap usage: 422 allocs, 421 frees, 136,325 bytes allocated
==8435== 
==8435== LEAK SUMMARY:
==8435==    definitely lost: 0 bytes in 0 blocks
==8435==    indirectly lost: 0 bytes in 0 blocks
==8435==      possibly lost: 0 bytes in 0 blocks
==8435==    still reachable: 0 bytes in 0 blocks
==8435==         suppressed: 72,704 bytes in 1 blocks
==8435== 
==8435== For counts of detected and suppressed errors, rerun with: -v
==8435== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListInsert.FrontThenBack" end time: Feb 11 20:51 PST
"ListInsert.FrontThenBack" time elapsed: 00:00:00
----------------------------------------------------------

7/110 Testing: ListInsert.BackThenFront
7/110 Test: ListInsert.BackThenFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsert.BackThenFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsert.BackThenFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8436== Memcheck, a memory error detector
==8436== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8436== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8436== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsert.BackThenFront
==8436== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsert.BackThenFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsert
[ RUN      ] ListInsert.BackThenFront
[       OK ] ListInsert.BackThenFront (12 ms)
[----------] 1 test from ListInsert (17 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (40 ms total)
[  PASSED  ] 1 test.
==8436== 
==8436== HEAP SUMMARY:
==8436==     in use at exit: 72,704 bytes in 1 blocks
==8436==   total heap usage: 422 allocs, 421 frees, 136,325 bytes allocated
==8436== 
==8436== LEAK SUMMARY:
==8436==    definitely lost: 0 bytes in 0 blocks
==8436==    indirectly lost: 0 bytes in 0 blocks
==8436==      possibly lost: 0 bytes in 0 blocks
==8436==    still reachable: 0 bytes in 0 blocks
==8436==         suppressed: 72,704 bytes in 1 blocks
==8436== 
==8436== For counts of detected and suppressed errors, rerun with: -v
==8436== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListInsert.BackThenFront" end time: Feb 11 20:51 PST
"ListInsert.BackThenFront" time elapsed: 00:00:00
----------------------------------------------------------

8/110 Testing: ListInsertBack.ARRSIZEPlusOne
8/110 Test: ListInsertBack.ARRSIZEPlusOne
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertBack.ARRSIZEPlusOne"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertBack.ARRSIZEPlusOne" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8437== Memcheck, a memory error detector
==8437== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8437== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8437== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertBack.ARRSIZEPlusOne
==8437== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertBack.ARRSIZEPlusOne
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertBack
[ RUN      ] ListInsertBack.ARRSIZEPlusOne
[       OK ] ListInsertBack.ARRSIZEPlusOne (36 ms)
[----------] 1 test from ListInsertBack (40 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (63 ms total)
[  PASSED  ] 1 test.
==8437== 
==8437== HEAP SUMMARY:
==8437==     in use at exit: 72,704 bytes in 1 blocks
==8437==   total heap usage: 478 allocs, 477 frees, 138,432 bytes allocated
==8437== 
==8437== LEAK SUMMARY:
==8437==    definitely lost: 0 bytes in 0 blocks
==8437==    indirectly lost: 0 bytes in 0 blocks
==8437==      possibly lost: 0 bytes in 0 blocks
==8437==    still reachable: 0 bytes in 0 blocks
==8437==         suppressed: 72,704 bytes in 1 blocks
==8437== 
==8437== For counts of detected and suppressed errors, rerun with: -v
==8437== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.61 sec
----------------------------------------------------------
Test Passed.
"ListInsertBack.ARRSIZEPlusOne" end time: Feb 11 20:51 PST
"ListInsertBack.ARRSIZEPlusOne" time elapsed: 00:00:00
----------------------------------------------------------

9/110 Testing: ListInsertFront.ARRSIZEPlusOne
9/110 Test: ListInsertFront.ARRSIZEPlusOne
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertFront.ARRSIZEPlusOne"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertFront.ARRSIZEPlusOne" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8438== Memcheck, a memory error detector
==8438== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8438== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8438== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertFront.ARRSIZEPlusOne
==8438== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertFront.ARRSIZEPlusOne
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertFront
[ RUN      ] ListInsertFront.ARRSIZEPlusOne
[       OK ] ListInsertFront.ARRSIZEPlusOne (37 ms)
[----------] 1 test from ListInsertFront (42 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (64 ms total)
[  PASSED  ] 1 test.
==8438== 
==8438== HEAP SUMMARY:
==8438==     in use at exit: 72,704 bytes in 1 blocks
==8438==   total heap usage: 478 allocs, 477 frees, 138,439 bytes allocated
==8438== 
==8438== LEAK SUMMARY:
==8438==    definitely lost: 0 bytes in 0 blocks
==8438==    indirectly lost: 0 bytes in 0 blocks
==8438==      possibly lost: 0 bytes in 0 blocks
==8438==    still reachable: 0 bytes in 0 blocks
==8438==         suppressed: 72,704 bytes in 1 blocks
==8438== 
==8438== For counts of detected and suppressed errors, rerun with: -v
==8438== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.61 sec
----------------------------------------------------------
Test Passed.
"ListInsertFront.ARRSIZEPlusOne" end time: Feb 11 20:51 PST
"ListInsertFront.ARRSIZEPlusOne" time elapsed: 00:00:00
----------------------------------------------------------

10/110 Testing: ListInsertBack.50RandomElements
10/110 Test: ListInsertBack.50RandomElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertBack.50RandomElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertBack.50RandomElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8439== Memcheck, a memory error detector
==8439== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8439== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8439== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertBack.50RandomElements
==8439== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertBack.50RandomElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertBack
[ RUN      ] ListInsertBack.50RandomElements
[       OK ] ListInsertBack.50RandomElements (76 ms)
[----------] 1 test from ListInsertBack (80 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (103 ms total)
[  PASSED  ] 1 test.
==8439== 
==8439== HEAP SUMMARY:
==8439==     in use at exit: 72,704 bytes in 1 blocks
==8439==   total heap usage: 689 allocs, 688 frees, 253,360 bytes allocated
==8439== 
==8439== LEAK SUMMARY:
==8439==    definitely lost: 0 bytes in 0 blocks
==8439==    indirectly lost: 0 bytes in 0 blocks
==8439==      possibly lost: 0 bytes in 0 blocks
==8439==    still reachable: 0 bytes in 0 blocks
==8439==         suppressed: 72,704 bytes in 1 blocks
==8439== 
==8439== For counts of detected and suppressed errors, rerun with: -v
==8439== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.65 sec
----------------------------------------------------------
Test Passed.
"ListInsertBack.50RandomElements" end time: Feb 11 20:51 PST
"ListInsertBack.50RandomElements" time elapsed: 00:00:00
----------------------------------------------------------

11/110 Testing: ListInsertFront.50RandomElements
11/110 Test: ListInsertFront.50RandomElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertFront.50RandomElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertFront.50RandomElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8440== Memcheck, a memory error detector
==8440== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8440== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8440== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertFront.50RandomElements
==8440== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertFront.50RandomElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertFront
[ RUN      ] ListInsertFront.50RandomElements
[       OK ] ListInsertFront.50RandomElements (78 ms)
[----------] 1 test from ListInsertFront (83 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (105 ms total)
[  PASSED  ] 1 test.
==8440== 
==8440== HEAP SUMMARY:
==8440==     in use at exit: 72,704 bytes in 1 blocks
==8440==   total heap usage: 689 allocs, 688 frees, 253,404 bytes allocated
==8440== 
==8440== LEAK SUMMARY:
==8440==    definitely lost: 0 bytes in 0 blocks
==8440==    indirectly lost: 0 bytes in 0 blocks
==8440==      possibly lost: 0 bytes in 0 blocks
==8440==    still reachable: 0 bytes in 0 blocks
==8440==         suppressed: 72,704 bytes in 1 blocks
==8440== 
==8440== For counts of detected and suppressed errors, rerun with: -v
==8440== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.65 sec
----------------------------------------------------------
Test Passed.
"ListInsertFront.50RandomElements" end time: Feb 11 20:51 PST
"ListInsertFront.50RandomElements" time elapsed: 00:00:00
----------------------------------------------------------

12/110 Testing: ListInsertBack.5x1000RandomElements
12/110 Test: ListInsertBack.5x1000RandomElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertBack.5x1000RandomElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertBack.5x1000RandomElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8441== Memcheck, a memory error detector
==8441== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8441== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8441== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertBack.5x1000RandomElements
==8441== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertBack.5x1000RandomElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertBack
[ RUN      ] ListInsertBack.5x1000RandomElements
[       OK ] ListInsertBack.5x1000RandomElements (447 ms)
[----------] 1 test from ListInsertBack (451 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (473 ms total)
[  PASSED  ] 1 test.
==8441== 
==8441== HEAP SUMMARY:
==8441==     in use at exit: 72,704 bytes in 1 blocks
==8441==   total heap usage: 3,539 allocs, 3,538 frees, 2,168,736 bytes allocated
==8441== 
==8441== LEAK SUMMARY:
==8441==    definitely lost: 0 bytes in 0 blocks
==8441==    indirectly lost: 0 bytes in 0 blocks
==8441==      possibly lost: 0 bytes in 0 blocks
==8441==    still reachable: 0 bytes in 0 blocks
==8441==         suppressed: 72,704 bytes in 1 blocks
==8441== 
==8441== For counts of detected and suppressed errors, rerun with: -v
==8441== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   1.03 sec
----------------------------------------------------------
Test Passed.
"ListInsertBack.5x1000RandomElements" end time: Feb 11 20:51 PST
"ListInsertBack.5x1000RandomElements" time elapsed: 00:00:01
----------------------------------------------------------

13/110 Testing: ListInsertFront.5x1000RandomElements
13/110 Test: ListInsertFront.5x1000RandomElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListInsertFront.5x1000RandomElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListInsertFront.5x1000RandomElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8442== Memcheck, a memory error detector
==8442== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8442== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8442== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListInsertFront.5x1000RandomElements
==8442== 
Running main() from gtest_main.cc
Note: Google Test filter = ListInsertFront.5x1000RandomElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListInsertFront
[ RUN      ] ListInsertFront.5x1000RandomElements
[       OK ] ListInsertFront.5x1000RandomElements (470 ms)
[----------] 1 test from ListInsertFront (474 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (496 ms total)
[  PASSED  ] 1 test.
==8442== 
==8442== HEAP SUMMARY:
==8442==     in use at exit: 72,704 bytes in 1 blocks
==8442==   total heap usage: 3,539 allocs, 3,538 frees, 2,168,780 bytes allocated
==8442== 
==8442== LEAK SUMMARY:
==8442==    definitely lost: 0 bytes in 0 blocks
==8442==    indirectly lost: 0 bytes in 0 blocks
==8442==      possibly lost: 0 bytes in 0 blocks
==8442==    still reachable: 0 bytes in 0 blocks
==8442==         suppressed: 72,704 bytes in 1 blocks
==8442== 
==8442== For counts of detected and suppressed errors, rerun with: -v
==8442== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   1.04 sec
----------------------------------------------------------
Test Passed.
"ListInsertFront.5x1000RandomElements" end time: Feb 11 20:51 PST
"ListInsertFront.5x1000RandomElements" time elapsed: 00:00:01
----------------------------------------------------------

14/110 Testing: UnrolledList.ConstructionDestruction
14/110 Test: UnrolledList.ConstructionDestruction
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.ConstructionDestruction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.ConstructionDestruction" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8443== Memcheck, a memory error detector
==8443== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8443== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8443== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.ConstructionDestruction
==8443== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.ConstructionDestruction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.ConstructionDestruction
[       OK ] UnrolledList.ConstructionDestruction (4 ms)
[----------] 1 test from UnrolledList (9 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (31 ms total)
[  PASSED  ] 1 test.
==8443== 
==8443== HEAP SUMMARY:
==8443==     in use at exit: 72,704 bytes in 1 blocks
==8443==   total heap usage: 418 allocs, 417 frees, 135,350 bytes allocated
==8443== 
==8443== LEAK SUMMARY:
==8443==    definitely lost: 0 bytes in 0 blocks
==8443==    indirectly lost: 0 bytes in 0 blocks
==8443==      possibly lost: 0 bytes in 0 blocks
==8443==    still reachable: 0 bytes in 0 blocks
==8443==         suppressed: 72,704 bytes in 1 blocks
==8443== 
==8443== For counts of detected and suppressed errors, rerun with: -v
==8443== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.ConstructionDestruction" end time: Feb 11 20:51 PST
"UnrolledList.ConstructionDestruction" time elapsed: 00:00:00
----------------------------------------------------------

15/110 Testing: UnrolledList.NoElements
15/110 Test: UnrolledList.NoElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.NoElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.NoElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8444== Memcheck, a memory error detector
==8444== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8444== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8444== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.NoElements
==8444== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.NoElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.NoElements
[       OK ] UnrolledList.NoElements (6 ms)
[----------] 1 test from UnrolledList (10 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (33 ms total)
[  PASSED  ] 1 test.
==8444== 
==8444== HEAP SUMMARY:
==8444==     in use at exit: 72,704 bytes in 1 blocks
==8444==   total heap usage: 418 allocs, 417 frees, 135,037 bytes allocated
==8444== 
==8444== LEAK SUMMARY:
==8444==    definitely lost: 0 bytes in 0 blocks
==8444==    indirectly lost: 0 bytes in 0 blocks
==8444==      possibly lost: 0 bytes in 0 blocks
==8444==    still reachable: 0 bytes in 0 blocks
==8444==         suppressed: 72,704 bytes in 1 blocks
==8444== 
==8444== For counts of detected and suppressed errors, rerun with: -v
==8444== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.NoElements" end time: Feb 11 20:51 PST
"UnrolledList.NoElements" time elapsed: 00:00:00
----------------------------------------------------------

16/110 Testing: UnrolledList.Front_PushBack
16/110 Test: UnrolledList.Front_PushBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.Front_PushBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.Front_PushBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8445== Memcheck, a memory error detector
==8445== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8445== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8445== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.Front_PushBack
==8445== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.Front_PushBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.Front_PushBack
[       OK ] UnrolledList.Front_PushBack (13 ms)
[----------] 1 test from UnrolledList (17 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (39 ms total)
[  PASSED  ] 1 test.
==8445== 
==8445== HEAP SUMMARY:
==8445==     in use at exit: 72,704 bytes in 1 blocks
==8445==   total heap usage: 422 allocs, 421 frees, 136,209 bytes allocated
==8445== 
==8445== LEAK SUMMARY:
==8445==    definitely lost: 0 bytes in 0 blocks
==8445==    indirectly lost: 0 bytes in 0 blocks
==8445==      possibly lost: 0 bytes in 0 blocks
==8445==    still reachable: 0 bytes in 0 blocks
==8445==         suppressed: 72,704 bytes in 1 blocks
==8445== 
==8445== For counts of detected and suppressed errors, rerun with: -v
==8445== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.Front_PushBack" end time: Feb 11 20:51 PST
"UnrolledList.Front_PushBack" time elapsed: 00:00:00
----------------------------------------------------------

17/110 Testing: UnrolledList.Front_PushFront
17/110 Test: UnrolledList.Front_PushFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.Front_PushFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.Front_PushFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8446== Memcheck, a memory error detector
==8446== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8446== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8446== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.Front_PushFront
==8446== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.Front_PushFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.Front_PushFront
[       OK ] UnrolledList.Front_PushFront (14 ms)
[----------] 1 test from UnrolledList (19 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (40 ms total)
[  PASSED  ] 1 test.
==8446== 
==8446== HEAP SUMMARY:
==8446==     in use at exit: 72,704 bytes in 1 blocks
==8446==   total heap usage: 422 allocs, 421 frees, 136,216 bytes allocated
==8446== 
==8446== LEAK SUMMARY:
==8446==    definitely lost: 0 bytes in 0 blocks
==8446==    indirectly lost: 0 bytes in 0 blocks
==8446==      possibly lost: 0 bytes in 0 blocks
==8446==    still reachable: 0 bytes in 0 blocks
==8446==         suppressed: 72,704 bytes in 1 blocks
==8446== 
==8446== For counts of detected and suppressed errors, rerun with: -v
==8446== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.Front_PushFront" end time: Feb 11 20:51 PST
"UnrolledList.Front_PushFront" time elapsed: 00:00:00
----------------------------------------------------------

18/110 Testing: UnrolledList.Back_PushBack
18/110 Test: UnrolledList.Back_PushBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.Back_PushBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.Back_PushBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8447== Memcheck, a memory error detector
==8447== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8447== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8447== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.Back_PushBack
==8447== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.Back_PushBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.Back_PushBack
[       OK ] UnrolledList.Back_PushBack (14 ms)
[----------] 1 test from UnrolledList (19 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (40 ms total)
[  PASSED  ] 1 test.
==8447== 
==8447== HEAP SUMMARY:
==8447==     in use at exit: 72,704 bytes in 1 blocks
==8447==   total heap usage: 422 allocs, 421 frees, 136,202 bytes allocated
==8447== 
==8447== LEAK SUMMARY:
==8447==    definitely lost: 0 bytes in 0 blocks
==8447==    indirectly lost: 0 bytes in 0 blocks
==8447==      possibly lost: 0 bytes in 0 blocks
==8447==    still reachable: 0 bytes in 0 blocks
==8447==         suppressed: 72,704 bytes in 1 blocks
==8447== 
==8447== For counts of detected and suppressed errors, rerun with: -v
==8447== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.Back_PushBack" end time: Feb 11 20:51 PST
"UnrolledList.Back_PushBack" time elapsed: 00:00:00
----------------------------------------------------------

19/110 Testing: UnrolledList.Back_PushFront
19/110 Test: UnrolledList.Back_PushFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=UnrolledList.Back_PushFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"UnrolledList.Back_PushFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8448== Memcheck, a memory error detector
==8448== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8448== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8448== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=UnrolledList.Back_PushFront
==8448== 
Running main() from gtest_main.cc
Note: Google Test filter = UnrolledList.Back_PushFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from UnrolledList
[ RUN      ] UnrolledList.Back_PushFront
[       OK ] UnrolledList.Back_PushFront (14 ms)
[----------] 1 test from UnrolledList (18 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (41 ms total)
[  PASSED  ] 1 test.
==8448== 
==8448== HEAP SUMMARY:
==8448==     in use at exit: 72,704 bytes in 1 blocks
==8448==   total heap usage: 422 allocs, 421 frees, 136,209 bytes allocated
==8448== 
==8448== LEAK SUMMARY:
==8448==    definitely lost: 0 bytes in 0 blocks
==8448==    indirectly lost: 0 bytes in 0 blocks
==8448==      possibly lost: 0 bytes in 0 blocks
==8448==    still reachable: 0 bytes in 0 blocks
==8448==         suppressed: 72,704 bytes in 1 blocks
==8448== 
==8448== For counts of detected and suppressed errors, rerun with: -v
==8448== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"UnrolledList.Back_PushFront" end time: Feb 11 20:51 PST
"UnrolledList.Back_PushFront" time elapsed: 00:00:00
----------------------------------------------------------

20/110 Testing: ListSet.OneItem
20/110 Test: ListSet.OneItem
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListSet.OneItem"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListSet.OneItem" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8449== Memcheck, a memory error detector
==8449== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8449== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8449== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListSet.OneItem
==8449== 
Running main() from gtest_main.cc
Note: Google Test filter = ListSet.OneItem
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListSet
[ RUN      ] ListSet.OneItem
[       OK ] ListSet.OneItem (8 ms)
[----------] 1 test from ListSet (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (35 ms total)
[  PASSED  ] 1 test.
==8449== 
==8449== HEAP SUMMARY:
==8449==     in use at exit: 72,704 bytes in 1 blocks
==8449==   total heap usage: 382 allocs, 381 frees, 134,186 bytes allocated
==8449== 
==8449== LEAK SUMMARY:
==8449==    definitely lost: 0 bytes in 0 blocks
==8449==    indirectly lost: 0 bytes in 0 blocks
==8449==      possibly lost: 0 bytes in 0 blocks
==8449==    still reachable: 0 bytes in 0 blocks
==8449==         suppressed: 72,704 bytes in 1 blocks
==8449== 
==8449== For counts of detected and suppressed errors, rerun with: -v
==8449== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListSet.OneItem" end time: Feb 11 20:51 PST
"ListSet.OneItem" time elapsed: 00:00:00
----------------------------------------------------------

21/110 Testing: ListSet.First
21/110 Test: ListSet.First
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListSet.First"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListSet.First" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8450== Memcheck, a memory error detector
==8450== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8450== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8450== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListSet.First
==8450== 
Running main() from gtest_main.cc
Note: Google Test filter = ListSet.First
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListSet
[ RUN      ] ListSet.First
[       OK ] ListSet.First (10 ms)
[----------] 1 test from ListSet (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8450== 
==8450== HEAP SUMMARY:
==8450==     in use at exit: 72,704 bytes in 1 blocks
==8450==   total heap usage: 383 allocs, 382 frees, 134,196 bytes allocated
==8450== 
==8450== LEAK SUMMARY:
==8450==    definitely lost: 0 bytes in 0 blocks
==8450==    indirectly lost: 0 bytes in 0 blocks
==8450==      possibly lost: 0 bytes in 0 blocks
==8450==    still reachable: 0 bytes in 0 blocks
==8450==         suppressed: 72,704 bytes in 1 blocks
==8450== 
==8450== For counts of detected and suppressed errors, rerun with: -v
==8450== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListSet.First" end time: Feb 11 20:51 PST
"ListSet.First" time elapsed: 00:00:00
----------------------------------------------------------

22/110 Testing: ListSet.Last
22/110 Test: ListSet.Last
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListSet.Last"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListSet.Last" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8451== Memcheck, a memory error detector
==8451== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8451== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8451== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListSet.Last
==8451== 
Running main() from gtest_main.cc
Note: Google Test filter = ListSet.Last
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListSet
[ RUN      ] ListSet.Last
[       OK ] ListSet.Last (10 ms)
[----------] 1 test from ListSet (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8451== 
==8451== HEAP SUMMARY:
==8451==     in use at exit: 72,704 bytes in 1 blocks
==8451==   total heap usage: 383 allocs, 382 frees, 134,189 bytes allocated
==8451== 
==8451== LEAK SUMMARY:
==8451==    definitely lost: 0 bytes in 0 blocks
==8451==    indirectly lost: 0 bytes in 0 blocks
==8451==      possibly lost: 0 bytes in 0 blocks
==8451==    still reachable: 0 bytes in 0 blocks
==8451==         suppressed: 72,704 bytes in 1 blocks
==8451== 
==8451== For counts of detected and suppressed errors, rerun with: -v
==8451== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListSet.Last" end time: Feb 11 20:51 PST
"ListSet.Last" time elapsed: 00:00:00
----------------------------------------------------------

23/110 Testing: ListSet.Middle
23/110 Test: ListSet.Middle
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListSet.Middle"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListSet.Middle" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8452== Memcheck, a memory error detector
==8452== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8452== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8452== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListSet.Middle
==8452== 
Running main() from gtest_main.cc
Note: Google Test filter = ListSet.Middle
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListSet
[ RUN      ] ListSet.Middle
[       OK ] ListSet.Middle (10 ms)
[----------] 1 test from ListSet (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8452== 
==8452== HEAP SUMMARY:
==8452==     in use at exit: 72,704 bytes in 1 blocks
==8452==   total heap usage: 383 allocs, 382 frees, 134,203 bytes allocated
==8452== 
==8452== LEAK SUMMARY:
==8452==    definitely lost: 0 bytes in 0 blocks
==8452==    indirectly lost: 0 bytes in 0 blocks
==8452==      possibly lost: 0 bytes in 0 blocks
==8452==    still reachable: 0 bytes in 0 blocks
==8452==         suppressed: 72,704 bytes in 1 blocks
==8452== 
==8452== For counts of detected and suppressed errors, rerun with: -v
==8452== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListSet.Middle" end time: Feb 11 20:51 PST
"ListSet.Middle" time elapsed: 00:00:00
----------------------------------------------------------

24/110 Testing: ListSet.50x50RandomElements
24/110 Test: ListSet.50x50RandomElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListSet.50x50RandomElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListSet.50x50RandomElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8453== Memcheck, a memory error detector
==8453== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8453== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8453== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListSet.50x50RandomElements
==8453== 
Running main() from gtest_main.cc
Note: Google Test filter = ListSet.50x50RandomElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListSet
[ RUN      ] ListSet.50x50RandomElements
[       OK ] ListSet.50x50RandomElements (93 ms)
[----------] 1 test from ListSet (98 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (120 ms total)
[  PASSED  ] 1 test.
==8453== 
==8453== HEAP SUMMARY:
==8453==     in use at exit: 72,704 bytes in 1 blocks
==8453==   total heap usage: 659 allocs, 658 frees, 237,905 bytes allocated
==8453== 
==8453== LEAK SUMMARY:
==8453==    definitely lost: 0 bytes in 0 blocks
==8453==    indirectly lost: 0 bytes in 0 blocks
==8453==      possibly lost: 0 bytes in 0 blocks
==8453==    still reachable: 0 bytes in 0 blocks
==8453==         suppressed: 72,704 bytes in 1 blocks
==8453== 
==8453== For counts of detected and suppressed errors, rerun with: -v
==8453== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.67 sec
----------------------------------------------------------
Test Passed.
"ListSet.50x50RandomElements" end time: Feb 11 20:51 PST
"ListSet.50x50RandomElements" time elapsed: 00:00:00
----------------------------------------------------------

25/110 Testing: ListRemove.OneItemFront
25/110 Test: ListRemove.OneItemFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.OneItemFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.OneItemFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8454== Memcheck, a memory error detector
==8454== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8454== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8454== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.OneItemFront
==8454== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.OneItemFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.OneItemFront
[       OK ] ListRemove.OneItemFront (10 ms)
[----------] 1 test from ListRemove (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8454== 
==8454== HEAP SUMMARY:
==8454==     in use at exit: 72,704 bytes in 1 blocks
==8454==   total heap usage: 419 allocs, 418 frees, 135,389 bytes allocated
==8454== 
==8454== LEAK SUMMARY:
==8454==    definitely lost: 0 bytes in 0 blocks
==8454==    indirectly lost: 0 bytes in 0 blocks
==8454==      possibly lost: 0 bytes in 0 blocks
==8454==    still reachable: 0 bytes in 0 blocks
==8454==         suppressed: 72,704 bytes in 1 blocks
==8454== 
==8454== For counts of detected and suppressed errors, rerun with: -v
==8454== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListRemove.OneItemFront" end time: Feb 11 20:51 PST
"ListRemove.OneItemFront" time elapsed: 00:00:00
----------------------------------------------------------

26/110 Testing: ListRemove.OneItemBack
26/110 Test: ListRemove.OneItemBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.OneItemBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.OneItemBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8455== Memcheck, a memory error detector
==8455== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8455== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8455== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.OneItemBack
==8455== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.OneItemBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.OneItemBack
[       OK ] ListRemove.OneItemBack (9 ms)
[----------] 1 test from ListRemove (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8455== 
==8455== HEAP SUMMARY:
==8455==     in use at exit: 72,704 bytes in 1 blocks
==8455==   total heap usage: 419 allocs, 418 frees, 135,382 bytes allocated
==8455== 
==8455== LEAK SUMMARY:
==8455==    definitely lost: 0 bytes in 0 blocks
==8455==    indirectly lost: 0 bytes in 0 blocks
==8455==      possibly lost: 0 bytes in 0 blocks
==8455==    still reachable: 0 bytes in 0 blocks
==8455==         suppressed: 72,704 bytes in 1 blocks
==8455== 
==8455== For counts of detected and suppressed errors, rerun with: -v
==8455== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListRemove.OneItemBack" end time: Feb 11 20:51 PST
"ListRemove.OneItemBack" time elapsed: 00:00:00
----------------------------------------------------------

27/110 Testing: ListRemove.RepeatedOneEleRemoveBack
27/110 Test: ListRemove.RepeatedOneEleRemoveBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.RepeatedOneEleRemoveBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.RepeatedOneEleRemoveBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8456== Memcheck, a memory error detector
==8456== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8456== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8456== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.RepeatedOneEleRemoveBack
==8456== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.RepeatedOneEleRemoveBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.RepeatedOneEleRemoveBack
[       OK ] ListRemove.RepeatedOneEleRemoveBack (10 ms)
[----------] 1 test from ListRemove (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8456== 
==8456== HEAP SUMMARY:
==8456==     in use at exit: 72,704 bytes in 1 blocks
==8456==   total heap usage: 422 allocs, 421 frees, 136,714 bytes allocated
==8456== 
==8456== LEAK SUMMARY:
==8456==    definitely lost: 0 bytes in 0 blocks
==8456==    indirectly lost: 0 bytes in 0 blocks
==8456==      possibly lost: 0 bytes in 0 blocks
==8456==    still reachable: 0 bytes in 0 blocks
==8456==         suppressed: 72,704 bytes in 1 blocks
==8456== 
==8456== For counts of detected and suppressed errors, rerun with: -v
==8456== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.60 sec
----------------------------------------------------------
Test Passed.
"ListRemove.RepeatedOneEleRemoveBack" end time: Feb 11 20:51 PST
"ListRemove.RepeatedOneEleRemoveBack" time elapsed: 00:00:00
----------------------------------------------------------

28/110 Testing: ListRemove.RepeatedOneEleRemoveFront
28/110 Test: ListRemove.RepeatedOneEleRemoveFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.RepeatedOneEleRemoveFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.RepeatedOneEleRemoveFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8457== Memcheck, a memory error detector
==8457== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8457== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8457== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.RepeatedOneEleRemoveFront
==8457== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.RepeatedOneEleRemoveFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.RepeatedOneEleRemoveFront
[       OK ] ListRemove.RepeatedOneEleRemoveFront (9 ms)
[----------] 1 test from ListRemove (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8457== 
==8457== HEAP SUMMARY:
==8457==     in use at exit: 72,704 bytes in 1 blocks
==8457==   total heap usage: 422 allocs, 421 frees, 136,758 bytes allocated
==8457== 
==8457== LEAK SUMMARY:
==8457==    definitely lost: 0 bytes in 0 blocks
==8457==    indirectly lost: 0 bytes in 0 blocks
==8457==      possibly lost: 0 bytes in 0 blocks
==8457==    still reachable: 0 bytes in 0 blocks
==8457==         suppressed: 72,704 bytes in 1 blocks
==8457== 
==8457== For counts of detected and suppressed errors, rerun with: -v
==8457== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListRemove.RepeatedOneEleRemoveFront" end time: Feb 11 20:51 PST
"ListRemove.RepeatedOneEleRemoveFront" time elapsed: 00:00:00
----------------------------------------------------------

29/110 Testing: ListRemove.Head3Elements
29/110 Test: ListRemove.Head3Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.Head3Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.Head3Elements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8458== Memcheck, a memory error detector
==8458== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8458== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8458== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.Head3Elements
==8458== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.Head3Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.Head3Elements
[       OK ] ListRemove.Head3Elements (18 ms)
[----------] 1 test from ListRemove (23 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (45 ms total)
[  PASSED  ] 1 test.
==8458== 
==8458== HEAP SUMMARY:
==8458==     in use at exit: 72,704 bytes in 1 blocks
==8458==   total heap usage: 422 allocs, 421 frees, 136,029 bytes allocated
==8458== 
==8458== LEAK SUMMARY:
==8458==    definitely lost: 0 bytes in 0 blocks
==8458==    indirectly lost: 0 bytes in 0 blocks
==8458==      possibly lost: 0 bytes in 0 blocks
==8458==    still reachable: 0 bytes in 0 blocks
==8458==         suppressed: 72,704 bytes in 1 blocks
==8458== 
==8458== For counts of detected and suppressed errors, rerun with: -v
==8458== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListRemove.Head3Elements" end time: Feb 11 20:51 PST
"ListRemove.Head3Elements" time elapsed: 00:00:00
----------------------------------------------------------

30/110 Testing: ListRemove.Tail3Elements
30/110 Test: ListRemove.Tail3Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.Tail3Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.Tail3Elements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8459== Memcheck, a memory error detector
==8459== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8459== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8459== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.Tail3Elements
==8459== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.Tail3Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.Tail3Elements
[       OK ] ListRemove.Tail3Elements (16 ms)
[----------] 1 test from ListRemove (21 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (42 ms total)
[  PASSED  ] 1 test.
==8459== 
==8459== HEAP SUMMARY:
==8459==     in use at exit: 72,704 bytes in 1 blocks
==8459==   total heap usage: 422 allocs, 421 frees, 136,029 bytes allocated
==8459== 
==8459== LEAK SUMMARY:
==8459==    definitely lost: 0 bytes in 0 blocks
==8459==    indirectly lost: 0 bytes in 0 blocks
==8459==      possibly lost: 0 bytes in 0 blocks
==8459==    still reachable: 0 bytes in 0 blocks
==8459==         suppressed: 72,704 bytes in 1 blocks
==8459== 
==8459== For counts of detected and suppressed errors, rerun with: -v
==8459== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListRemove.Tail3Elements" end time: Feb 11 20:51 PST
"ListRemove.Tail3Elements" time elapsed: 00:00:00
----------------------------------------------------------

31/110 Testing: ListRemove.AtARRSIZE
31/110 Test: ListRemove.AtARRSIZE
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.AtARRSIZE"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.AtARRSIZE" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8460== Memcheck, a memory error detector
==8460== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8460== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8460== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.AtARRSIZE
==8460== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.AtARRSIZE
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.AtARRSIZE
[       OK ] ListRemove.AtARRSIZE (12 ms)
[----------] 1 test from ListRemove (17 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (39 ms total)
[  PASSED  ] 1 test.
==8460== 
==8460== HEAP SUMMARY:
==8460==     in use at exit: 72,704 bytes in 1 blocks
==8460==   total heap usage: 421 allocs, 420 frees, 135,712 bytes allocated
==8460== 
==8460== LEAK SUMMARY:
==8460==    definitely lost: 0 bytes in 0 blocks
==8460==    indirectly lost: 0 bytes in 0 blocks
==8460==      possibly lost: 0 bytes in 0 blocks
==8460==    still reachable: 0 bytes in 0 blocks
==8460==         suppressed: 72,704 bytes in 1 blocks
==8460== 
==8460== For counts of detected and suppressed errors, rerun with: -v
==8460== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.60 sec
----------------------------------------------------------
Test Passed.
"ListRemove.AtARRSIZE" end time: Feb 11 20:51 PST
"ListRemove.AtARRSIZE" time elapsed: 00:00:00
----------------------------------------------------------

32/110 Testing: ListRemove.AtARRSIZEPlusOne
32/110 Test: ListRemove.AtARRSIZEPlusOne
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.AtARRSIZEPlusOne"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.AtARRSIZEPlusOne" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8461== Memcheck, a memory error detector
==8461== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8461== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8461== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.AtARRSIZEPlusOne
==8461== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.AtARRSIZEPlusOne
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.AtARRSIZEPlusOne
[       OK ] ListRemove.AtARRSIZEPlusOne (13 ms)
[----------] 1 test from ListRemove (17 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (40 ms total)
[  PASSED  ] 1 test.
==8461== 
==8461== HEAP SUMMARY:
==8461==     in use at exit: 72,704 bytes in 1 blocks
==8461==   total heap usage: 422 allocs, 421 frees, 136,145 bytes allocated
==8461== 
==8461== LEAK SUMMARY:
==8461==    definitely lost: 0 bytes in 0 blocks
==8461==    indirectly lost: 0 bytes in 0 blocks
==8461==      possibly lost: 0 bytes in 0 blocks
==8461==    still reachable: 0 bytes in 0 blocks
==8461==         suppressed: 72,704 bytes in 1 blocks
==8461== 
==8461== For counts of detected and suppressed errors, rerun with: -v
==8461== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.58 sec
----------------------------------------------------------
Test Passed.
"ListRemove.AtARRSIZEPlusOne" end time: Feb 11 20:51 PST
"ListRemove.AtARRSIZEPlusOne" time elapsed: 00:00:00
----------------------------------------------------------

33/110 Testing: ListRemove.SongOfBackAndFront
33/110 Test: ListRemove.SongOfBackAndFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.SongOfBackAndFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.SongOfBackAndFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8462== Memcheck, a memory error detector
==8462== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8462== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8462== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.SongOfBackAndFront
==8462== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.SongOfBackAndFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.SongOfBackAndFront
[       OK ] ListRemove.SongOfBackAndFront (20 ms)
[----------] 1 test from ListRemove (24 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (47 ms total)
[  PASSED  ] 1 test.
==8462== 
==8462== HEAP SUMMARY:
==8462==     in use at exit: 72,704 bytes in 1 blocks
==8462==   total heap usage: 432 allocs, 431 frees, 139,469 bytes allocated
==8462== 
==8462== LEAK SUMMARY:
==8462==    definitely lost: 0 bytes in 0 blocks
==8462==    indirectly lost: 0 bytes in 0 blocks
==8462==      possibly lost: 0 bytes in 0 blocks
==8462==    still reachable: 0 bytes in 0 blocks
==8462==         suppressed: 72,704 bytes in 1 blocks
==8462== 
==8462== For counts of detected and suppressed errors, rerun with: -v
==8462== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListRemove.SongOfBackAndFront" end time: Feb 11 20:51 PST
"ListRemove.SongOfBackAndFront" time elapsed: 00:00:00
----------------------------------------------------------

34/110 Testing: ListRemove.50ElementsFromBack
34/110 Test: ListRemove.50ElementsFromBack
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.50ElementsFromBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.50ElementsFromBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8463== Memcheck, a memory error detector
==8463== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8463== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8463== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.50ElementsFromBack
==8463== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.50ElementsFromBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.50ElementsFromBack
[       OK ] ListRemove.50ElementsFromBack (29 ms)
[----------] 1 test from ListRemove (34 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (56 ms total)
[  PASSED  ] 1 test.
==8463== 
==8463== HEAP SUMMARY:
==8463==     in use at exit: 72,704 bytes in 1 blocks
==8463==   total heap usage: 475 allocs, 474 frees, 164,113 bytes allocated
==8463== 
==8463== LEAK SUMMARY:
==8463==    definitely lost: 0 bytes in 0 blocks
==8463==    indirectly lost: 0 bytes in 0 blocks
==8463==      possibly lost: 0 bytes in 0 blocks
==8463==    still reachable: 0 bytes in 0 blocks
==8463==         suppressed: 72,704 bytes in 1 blocks
==8463== 
==8463== For counts of detected and suppressed errors, rerun with: -v
==8463== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.61 sec
----------------------------------------------------------
Test Passed.
"ListRemove.50ElementsFromBack" end time: Feb 11 20:51 PST
"ListRemove.50ElementsFromBack" time elapsed: 00:00:00
----------------------------------------------------------

35/110 Testing: ListRemove.50ElementsFromFront
35/110 Test: ListRemove.50ElementsFromFront
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests" "--gtest_filter=ListRemove.50ElementsFromFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRemove.50ElementsFromFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8464== Memcheck, a memory error detector
==8464== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8464== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8464== Command: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_tests --gtest_filter=ListRemove.50ElementsFromFront
==8464== 
Running main() from gtest_main.cc
Note: Google Test filter = ListRemove.50ElementsFromFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRemove
[ RUN      ] ListRemove.50ElementsFromFront
[       OK ] ListRemove.50ElementsFromFront (31 ms)
[----------] 1 test from ListRemove (35 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (58 ms total)
[  PASSED  ] 1 test.
==8464== 
==8464== HEAP SUMMARY:
==8464==     in use at exit: 72,704 bytes in 1 blocks
==8464==   total heap usage: 450 allocs, 449 frees, 151,295 bytes allocated
==8464== 
==8464== LEAK SUMMARY:
==8464==    definitely lost: 0 bytes in 0 blocks
==8464==    indirectly lost: 0 bytes in 0 blocks
==8464==      possibly lost: 0 bytes in 0 blocks
==8464==    still reachable: 0 bytes in 0 blocks
==8464==         suppressed: 72,704 bytes in 1 blocks
==8464== 
==8464== For counts of detected and suppressed errors, rerun with: -v
==8464== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.60 sec
----------------------------------------------------------
Test Passed.
"ListRemove.50ElementsFromFront" end time: Feb 11 20:51 PST
"ListRemove.50ElementsFromFront" time elapsed: 00:00:00
----------------------------------------------------------

36/110 Testing: ListRuntime.Get
36/110 Test: ListRuntime.Get
Command: "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_runtime_tests" "--gtest_filter=ListRuntime.Get"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRuntime.Get" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = ListRuntime.Get
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRuntime
[ RUN      ] ListRuntime.Get
>> Evaluating runtime of ULListStr::get()
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^19 (524288) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (1.9508) is >= threshold (1.4000)
>> Time complexity of ULListStr::get() is likely linear
Testing if time complexity could be constant...
Correlation factor (-2.1389) is < threshold (1.4000)
Testing if time complexity could be logarithmic...
Correlation factor (0.5432) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.3150) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (1.4135) is >= threshold (1.4000)
>> Time complexity of ULListStr::get() is likely quadratic
Testing if time complexity could be cubic...
Correlation factor (0.7766) is < threshold (1.4000)
[       OK ] ListRuntime.Get (1596 ms)
[----------] 1 test from ListRuntime (1596 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (1596 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   1.60 sec
----------------------------------------------------------
Test Passed.
"ListRuntime.Get" end time: Feb 11 20:51 PST
"ListRuntime.Get" time elapsed: 00:00:01
----------------------------------------------------------

37/110 Testing: ListRuntime.PushBack
37/110 Test: ListRuntime.PushBack
Command: "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_runtime_tests" "--gtest_filter=ListRuntime.PushBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRuntime.PushBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = ListRuntime.PushBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRuntime
[ RUN      ] ListRuntime.PushBack
>> Evaluating runtime of ULListStr::push_back()
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.1171) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (2.6837) is >= threshold (1.4000)
>> Time complexity of ULListStr::push_back() is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.2421) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.2920) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.0472) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0339) is < threshold (1.4000)
[       OK ] ListRuntime.PushBack (765 ms)
[----------] 1 test from ListRuntime (765 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (765 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.77 sec
----------------------------------------------------------
Test Passed.
"ListRuntime.PushBack" end time: Feb 11 20:51 PST
"ListRuntime.PushBack" time elapsed: 00:00:00
----------------------------------------------------------

38/110 Testing: ListRuntime.PushFront
38/110 Test: ListRuntime.PushFront
Command: "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_runtime_tests" "--gtest_filter=ListRuntime.PushFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRuntime.PushFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = ListRuntime.PushFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRuntime
[ RUN      ] ListRuntime.PushFront
>> Evaluating runtime of ULListStr::push_front()
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.1823) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (2.8336) is >= threshold (1.4000)
>> Time complexity of ULListStr::push_front() is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.4129) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.3147) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.0685) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0382) is < threshold (1.4000)
[       OK ] ListRuntime.PushFront (775 ms)
[----------] 1 test from ListRuntime (775 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (775 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.78 sec
----------------------------------------------------------
Test Passed.
"ListRuntime.PushFront" end time: Feb 11 20:51 PST
"ListRuntime.PushFront" time elapsed: 00:00:00
----------------------------------------------------------

39/110 Testing: ListRuntime.PopFront
39/110 Test: ListRuntime.PopFront
Command: "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_runtime_tests" "--gtest_filter=ListRuntime.PopFront"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRuntime.PopFront" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = ListRuntime.PopFront
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRuntime
[ RUN      ] ListRuntime.PopFront
>> Evaluating runtime of ULListStr::pop_front()
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.3984) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (1.6049) is >= threshold (1.4000)
>> Time complexity of ULListStr::pop_front() is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.5731) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.2996) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.1277) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0806) is < threshold (1.4000)
[       OK ] ListRuntime.PopFront (783 ms)
[----------] 1 test from ListRuntime (783 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (783 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.79 sec
----------------------------------------------------------
Test Passed.
"ListRuntime.PopFront" end time: Feb 11 20:51 PST
"ListRuntime.PopFront" time elapsed: 00:00:00
----------------------------------------------------------

40/110 Testing: ListRuntime.PopBack
40/110 Test: ListRuntime.PopBack
Command: "/home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests/unrolledlist_runtime_tests" "--gtest_filter=ListRuntime.PopBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/unrolledlist_tests
"ListRuntime.PopBack" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = ListRuntime.PopBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListRuntime
[ RUN      ] ListRuntime.PopBack
>> Evaluating runtime of ULListStr::pop_back()
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.4029) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (1.7469) is >= threshold (1.4000)
>> Time complexity of ULListStr::pop_back() is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.5866) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.3002) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.1304) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0775) is < threshold (1.4000)
[       OK ] ListRuntime.PopBack (778 ms)
[----------] 1 test from ListRuntime (778 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (778 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.78 sec
----------------------------------------------------------
Test Passed.
"ListRuntime.PopBack" end time: Feb 11 20:51 PST
"ListRuntime.PopBack" time elapsed: 00:00:00
----------------------------------------------------------

41/110 Testing: ListCopy.OneElement
41/110 Test: ListCopy.OneElement
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListCopy.OneElement"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListCopy.OneElement" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8470== Memcheck, a memory error detector
==8470== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8470== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8470== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListCopy.OneElement
==8470== 
Running main() from gtest_main.cc
Note: Google Test filter = ListCopy.OneElement
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListCopy
[ RUN      ] ListCopy.OneElement
[       OK ] ListCopy.OneElement (10 ms)
[----------] 1 test from ListCopy (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (46 ms total)
[  PASSED  ] 1 test.
==8470== 
==8470== HEAP SUMMARY:
==8470==     in use at exit: 72,704 bytes in 1 blocks
==8470==   total heap usage: 324 allocs, 323 frees, 129,444 bytes allocated
==8470== 
==8470== LEAK SUMMARY:
==8470==    definitely lost: 0 bytes in 0 blocks
==8470==    indirectly lost: 0 bytes in 0 blocks
==8470==      possibly lost: 0 bytes in 0 blocks
==8470==    still reachable: 0 bytes in 0 blocks
==8470==         suppressed: 72,704 bytes in 1 blocks
==8470== 
==8470== For counts of detected and suppressed errors, rerun with: -v
==8470== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListCopy.OneElement" end time: Feb 11 20:51 PST
"ListCopy.OneElement" time elapsed: 00:00:00
----------------------------------------------------------

42/110 Testing: ListCopy.NoElements
42/110 Test: ListCopy.NoElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListCopy.NoElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListCopy.NoElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8471== Memcheck, a memory error detector
==8471== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8471== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8471== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListCopy.NoElements
==8471== 
Running main() from gtest_main.cc
Note: Google Test filter = ListCopy.NoElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListCopy
[ RUN      ] ListCopy.NoElements
[       OK ] ListCopy.NoElements (6 ms)
[----------] 1 test from ListCopy (11 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (34 ms total)
[  PASSED  ] 1 test.
==8471== 
==8471== HEAP SUMMARY:
==8471==     in use at exit: 72,704 bytes in 1 blocks
==8471==   total heap usage: 322 allocs, 321 frees, 128,740 bytes allocated
==8471== 
==8471== LEAK SUMMARY:
==8471==    definitely lost: 0 bytes in 0 blocks
==8471==    indirectly lost: 0 bytes in 0 blocks
==8471==      possibly lost: 0 bytes in 0 blocks
==8471==    still reachable: 0 bytes in 0 blocks
==8471==         suppressed: 72,704 bytes in 1 blocks
==8471== 
==8471== For counts of detected and suppressed errors, rerun with: -v
==8471== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.55 sec
----------------------------------------------------------
Test Passed.
"ListCopy.NoElements" end time: Feb 11 20:51 PST
"ListCopy.NoElements" time elapsed: 00:00:00
----------------------------------------------------------

43/110 Testing: ListCopy.15Elements
43/110 Test: ListCopy.15Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListCopy.15Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListCopy.15Elements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8472== Memcheck, a memory error detector
==8472== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8472== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8472== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListCopy.15Elements
==8472== 
Running main() from gtest_main.cc
Note: Google Test filter = ListCopy.15Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListCopy
[ RUN      ] ListCopy.15Elements
[       OK ] ListCopy.15Elements (39 ms)
[----------] 1 test from ListCopy (44 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (65 ms total)
[  PASSED  ] 1 test.
==8472== 
==8472== HEAP SUMMARY:
==8472==     in use at exit: 72,704 bytes in 1 blocks
==8472==   total heap usage: 344 allocs, 343 frees, 132,125 bytes allocated
==8472== 
==8472== LEAK SUMMARY:
==8472==    definitely lost: 0 bytes in 0 blocks
==8472==    indirectly lost: 0 bytes in 0 blocks
==8472==      possibly lost: 0 bytes in 0 blocks
==8472==    still reachable: 0 bytes in 0 blocks
==8472==         suppressed: 72,704 bytes in 1 blocks
==8472== 
==8472== For counts of detected and suppressed errors, rerun with: -v
==8472== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListCopy.15Elements" end time: Feb 11 20:51 PST
"ListCopy.15Elements" time elapsed: 00:00:00
----------------------------------------------------------

44/110 Testing: ListCopy.SourceNotModified
44/110 Test: ListCopy.SourceNotModified
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListCopy.SourceNotModified"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListCopy.SourceNotModified" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8473== Memcheck, a memory error detector
==8473== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8473== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8473== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListCopy.SourceNotModified
==8473== 
Running main() from gtest_main.cc
Note: Google Test filter = ListCopy.SourceNotModified
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListCopy
[ RUN      ] ListCopy.SourceNotModified
[       OK ] ListCopy.SourceNotModified (39 ms)
[----------] 1 test from ListCopy (43 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (66 ms total)
[  PASSED  ] 1 test.
==8473== 
==8473== HEAP SUMMARY:
==8473==     in use at exit: 72,704 bytes in 1 blocks
==8473==   total heap usage: 344 allocs, 343 frees, 132,174 bytes allocated
==8473== 
==8473== LEAK SUMMARY:
==8473==    definitely lost: 0 bytes in 0 blocks
==8473==    indirectly lost: 0 bytes in 0 blocks
==8473==      possibly lost: 0 bytes in 0 blocks
==8473==    still reachable: 0 bytes in 0 blocks
==8473==         suppressed: 72,704 bytes in 1 blocks
==8473== 
==8473== For counts of detected and suppressed errors, rerun with: -v
==8473== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListCopy.SourceNotModified" end time: Feb 11 20:51 PST
"ListCopy.SourceNotModified" time elapsed: 00:00:00
----------------------------------------------------------

45/110 Testing: ListAssign.OneElement
45/110 Test: ListAssign.OneElement
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListAssign.OneElement"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListAssign.OneElement" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8474== Memcheck, a memory error detector
==8474== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8474== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8474== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListAssign.OneElement
==8474== 
Running main() from gtest_main.cc
Note: Google Test filter = ListAssign.OneElement
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListAssign
[ RUN      ] ListAssign.OneElement
[       OK ] ListAssign.OneElement (11 ms)
[----------] 1 test from ListAssign (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (38 ms total)
[  PASSED  ] 1 test.
==8474== 
==8474== HEAP SUMMARY:
==8474==     in use at exit: 72,704 bytes in 1 blocks
==8474==   total heap usage: 325 allocs, 324 frees, 129,810 bytes allocated
==8474== 
==8474== LEAK SUMMARY:
==8474==    definitely lost: 0 bytes in 0 blocks
==8474==    indirectly lost: 0 bytes in 0 blocks
==8474==      possibly lost: 0 bytes in 0 blocks
==8474==    still reachable: 0 bytes in 0 blocks
==8474==         suppressed: 72,704 bytes in 1 blocks
==8474== 
==8474== For counts of detected and suppressed errors, rerun with: -v
==8474== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListAssign.OneElement" end time: Feb 11 20:51 PST
"ListAssign.OneElement" time elapsed: 00:00:00
----------------------------------------------------------

46/110 Testing: ListAssign.OneElementToEmpty
46/110 Test: ListAssign.OneElementToEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListAssign.OneElementToEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListAssign.OneElementToEmpty" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8475== Memcheck, a memory error detector
==8475== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8475== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8475== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListAssign.OneElementToEmpty
==8475== 
Running main() from gtest_main.cc
Note: Google Test filter = ListAssign.OneElementToEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListAssign
[ RUN      ] ListAssign.OneElementToEmpty
[       OK ] ListAssign.OneElementToEmpty (10 ms)
[----------] 1 test from ListAssign (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8475== 
==8475== HEAP SUMMARY:
==8475==     in use at exit: 72,704 bytes in 1 blocks
==8475==   total heap usage: 324 allocs, 323 frees, 129,507 bytes allocated
==8475== 
==8475== LEAK SUMMARY:
==8475==    definitely lost: 0 bytes in 0 blocks
==8475==    indirectly lost: 0 bytes in 0 blocks
==8475==      possibly lost: 0 bytes in 0 blocks
==8475==    still reachable: 0 bytes in 0 blocks
==8475==         suppressed: 72,704 bytes in 1 blocks
==8475== 
==8475== For counts of detected and suppressed errors, rerun with: -v
==8475== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListAssign.OneElementToEmpty" end time: Feb 11 20:51 PST
"ListAssign.OneElementToEmpty" time elapsed: 00:00:00
----------------------------------------------------------

47/110 Testing: ListAssign.NoElements
47/110 Test: ListAssign.NoElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListAssign.NoElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListAssign.NoElements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8476== Memcheck, a memory error detector
==8476== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8476== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8476== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListAssign.NoElements
==8476== 
Running main() from gtest_main.cc
Note: Google Test filter = ListAssign.NoElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListAssign
[ RUN      ] ListAssign.NoElements
[       OK ] ListAssign.NoElements (9 ms)
[----------] 1 test from ListAssign (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8476== 
==8476== HEAP SUMMARY:
==8476==     in use at exit: 72,704 bytes in 1 blocks
==8476==   total heap usage: 323 allocs, 322 frees, 129,106 bytes allocated
==8476== 
==8476== LEAK SUMMARY:
==8476==    definitely lost: 0 bytes in 0 blocks
==8476==    indirectly lost: 0 bytes in 0 blocks
==8476==      possibly lost: 0 bytes in 0 blocks
==8476==    still reachable: 0 bytes in 0 blocks
==8476==         suppressed: 72,704 bytes in 1 blocks
==8476== 
==8476== For counts of detected and suppressed errors, rerun with: -v
==8476== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListAssign.NoElements" end time: Feb 11 20:51 PST
"ListAssign.NoElements" time elapsed: 00:00:00
----------------------------------------------------------

48/110 Testing: ListAssign.NoElementsToEmpty
48/110 Test: ListAssign.NoElementsToEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListAssign.NoElementsToEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListAssign.NoElementsToEmpty" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8477== Memcheck, a memory error detector
==8477== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8477== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8477== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListAssign.NoElementsToEmpty
==8477== 
Running main() from gtest_main.cc
Note: Google Test filter = ListAssign.NoElementsToEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListAssign
[ RUN      ] ListAssign.NoElementsToEmpty
[       OK ] ListAssign.NoElementsToEmpty (9 ms)
[----------] 1 test from ListAssign (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8477== 
==8477== HEAP SUMMARY:
==8477==     in use at exit: 72,704 bytes in 1 blocks
==8477==   total heap usage: 323 allocs, 322 frees, 129,155 bytes allocated
==8477== 
==8477== LEAK SUMMARY:
==8477==    definitely lost: 0 bytes in 0 blocks
==8477==    indirectly lost: 0 bytes in 0 blocks
==8477==      possibly lost: 0 bytes in 0 blocks
==8477==    still reachable: 0 bytes in 0 blocks
==8477==         suppressed: 72,704 bytes in 1 blocks
==8477== 
==8477== For counts of detected and suppressed errors, rerun with: -v
==8477== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListAssign.NoElementsToEmpty" end time: Feb 11 20:51 PST
"ListAssign.NoElementsToEmpty" time elapsed: 00:00:00
----------------------------------------------------------

49/110 Testing: ListAssign.15Elements
49/110 Test: ListAssign.15Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListAssign.15Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListAssign.15Elements" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8478== Memcheck, a memory error detector
==8478== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8478== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8478== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListAssign.15Elements
==8478== 
Running main() from gtest_main.cc
Note: Google Test filter = ListAssign.15Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListAssign
[ RUN      ] ListAssign.15Elements
[       OK ] ListAssign.15Elements (39 ms)
[----------] 1 test from ListAssign (44 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (66 ms total)
[  PASSED  ] 1 test.
==8478== 
==8478== HEAP SUMMARY:
==8478==     in use at exit: 72,704 bytes in 1 blocks
==8478==   total heap usage: 344 allocs, 343 frees, 132,139 bytes allocated
==8478== 
==8478== LEAK SUMMARY:
==8478==    definitely lost: 0 bytes in 0 blocks
==8478==    indirectly lost: 0 bytes in 0 blocks
==8478==      possibly lost: 0 bytes in 0 blocks
==8478==    still reachable: 0 bytes in 0 blocks
==8478==         suppressed: 72,704 bytes in 1 blocks
==8478== 
==8478== For counts of detected and suppressed errors, rerun with: -v
==8478== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListAssign.15Elements" end time: Feb 11 20:51 PST
"ListAssign.15Elements" time elapsed: 00:00:00
----------------------------------------------------------

50/110 Testing: ListPlus.EmptyPlusEmpty
50/110 Test: ListPlus.EmptyPlusEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListPlus.EmptyPlusEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListPlus.EmptyPlusEmpty" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8479== Memcheck, a memory error detector
==8479== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8479== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8479== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListPlus.EmptyPlusEmpty
==8479== 
Running main() from gtest_main.cc
Note: Google Test filter = ListPlus.EmptyPlusEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListPlus
[ RUN      ] ListPlus.EmptyPlusEmpty
[       OK ] ListPlus.EmptyPlusEmpty (7 ms)
[----------] 1 test from ListPlus (11 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (34 ms total)
[  PASSED  ] 1 test.
==8479== 
==8479== HEAP SUMMARY:
==8479==     in use at exit: 72,704 bytes in 1 blocks
==8479==   total heap usage: 322 allocs, 321 frees, 128,768 bytes allocated
==8479== 
==8479== LEAK SUMMARY:
==8479==    definitely lost: 0 bytes in 0 blocks
==8479==    indirectly lost: 0 bytes in 0 blocks
==8479==      possibly lost: 0 bytes in 0 blocks
==8479==    still reachable: 0 bytes in 0 blocks
==8479==         suppressed: 72,704 bytes in 1 blocks
==8479== 
==8479== For counts of detected and suppressed errors, rerun with: -v
==8479== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListPlus.EmptyPlusEmpty" end time: Feb 11 20:51 PST
"ListPlus.EmptyPlusEmpty" time elapsed: 00:00:00
----------------------------------------------------------

51/110 Testing: ListPlus.EmptyPlusOne
51/110 Test: ListPlus.EmptyPlusOne
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListPlus.EmptyPlusOne"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListPlus.EmptyPlusOne" start time: Feb 11 20:51 PST
Output:
----------------------------------------------------------
==8480== Memcheck, a memory error detector
==8480== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8480== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8480== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListPlus.EmptyPlusOne
==8480== 
Running main() from gtest_main.cc
Note: Google Test filter = ListPlus.EmptyPlusOne
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListPlus
[ RUN      ] ListPlus.EmptyPlusOne
[       OK ] ListPlus.EmptyPlusOne (18 ms)
[----------] 1 test from ListPlus (22 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (45 ms total)
[  PASSED  ] 1 test.
==8480== 
==8480== HEAP SUMMARY:
==8480==     in use at exit: 72,704 bytes in 1 blocks
==8480==   total heap usage: 326 allocs, 325 frees, 130,003 bytes allocated
==8480== 
==8480== LEAK SUMMARY:
==8480==    definitely lost: 0 bytes in 0 blocks
==8480==    indirectly lost: 0 bytes in 0 blocks
==8480==      possibly lost: 0 bytes in 0 blocks
==8480==    still reachable: 0 bytes in 0 blocks
==8480==         suppressed: 72,704 bytes in 1 blocks
==8480== 
==8480== For counts of detected and suppressed errors, rerun with: -v
==8480== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListPlus.EmptyPlusOne" end time: Feb 11 20:52 PST
"ListPlus.EmptyPlusOne" time elapsed: 00:00:00
----------------------------------------------------------

52/110 Testing: ListPlus.TwoPlusEmpty
52/110 Test: ListPlus.TwoPlusEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListPlus.TwoPlusEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListPlus.TwoPlusEmpty" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8481== Memcheck, a memory error detector
==8481== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8481== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8481== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListPlus.TwoPlusEmpty
==8481== 
Running main() from gtest_main.cc
Note: Google Test filter = ListPlus.TwoPlusEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListPlus
[ RUN      ] ListPlus.TwoPlusEmpty
[       OK ] ListPlus.TwoPlusEmpty (18 ms)
[----------] 1 test from ListPlus (23 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (45 ms total)
[  PASSED  ] 1 test.
==8481== 
==8481== HEAP SUMMARY:
==8481==     in use at exit: 72,704 bytes in 1 blocks
==8481==   total heap usage: 326 allocs, 325 frees, 130,035 bytes allocated
==8481== 
==8481== LEAK SUMMARY:
==8481==    definitely lost: 0 bytes in 0 blocks
==8481==    indirectly lost: 0 bytes in 0 blocks
==8481==      possibly lost: 0 bytes in 0 blocks
==8481==    still reachable: 0 bytes in 0 blocks
==8481==         suppressed: 72,704 bytes in 1 blocks
==8481== 
==8481== For counts of detected and suppressed errors, rerun with: -v
==8481== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListPlus.TwoPlusEmpty" end time: Feb 11 20:52 PST
"ListPlus.TwoPlusEmpty" time elapsed: 00:00:00
----------------------------------------------------------

53/110 Testing: ListMinusEquals.OneElement
53/110 Test: ListMinusEquals.OneElement
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListMinusEquals.OneElement"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListMinusEquals.OneElement" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8482== Memcheck, a memory error detector
==8482== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8482== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8482== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListMinusEquals.OneElement
==8482== 
Running main() from gtest_main.cc
Note: Google Test filter = ListMinusEquals.OneElement
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListMinusEquals
[ RUN      ] ListMinusEquals.OneElement
[       OK ] ListMinusEquals.OneElement (9 ms)
[----------] 1 test from ListMinusEquals (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8482== 
==8482== HEAP SUMMARY:
==8482==     in use at exit: 72,704 bytes in 1 blocks
==8482==   total heap usage: 323 allocs, 322 frees, 129,141 bytes allocated
==8482== 
==8482== LEAK SUMMARY:
==8482==    definitely lost: 0 bytes in 0 blocks
==8482==    indirectly lost: 0 bytes in 0 blocks
==8482==      possibly lost: 0 bytes in 0 blocks
==8482==    still reachable: 0 bytes in 0 blocks
==8482==         suppressed: 72,704 bytes in 1 blocks
==8482== 
==8482== For counts of detected and suppressed errors, rerun with: -v
==8482== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListMinusEquals.OneElement" end time: Feb 11 20:52 PST
"ListMinusEquals.OneElement" time elapsed: 00:00:00
----------------------------------------------------------

54/110 Testing: ListMinusEquals.ThreeElements
54/110 Test: ListMinusEquals.ThreeElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListMinusEquals.ThreeElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListMinusEquals.ThreeElements" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8483== Memcheck, a memory error detector
==8483== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8483== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8483== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListMinusEquals.ThreeElements
==8483== 
Running main() from gtest_main.cc
Note: Google Test filter = ListMinusEquals.ThreeElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListMinusEquals
[ RUN      ] ListMinusEquals.ThreeElements
[       OK ] ListMinusEquals.ThreeElements (10 ms)
[----------] 1 test from ListMinusEquals (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (38 ms total)
[  PASSED  ] 1 test.
==8483== 
==8483== HEAP SUMMARY:
==8483==     in use at exit: 72,704 bytes in 1 blocks
==8483==   total heap usage: 323 allocs, 322 frees, 129,162 bytes allocated
==8483== 
==8483== LEAK SUMMARY:
==8483==    definitely lost: 0 bytes in 0 blocks
==8483==    indirectly lost: 0 bytes in 0 blocks
==8483==      possibly lost: 0 bytes in 0 blocks
==8483==    still reachable: 0 bytes in 0 blocks
==8483==         suppressed: 72,704 bytes in 1 blocks
==8483== 
==8483== For counts of detected and suppressed errors, rerun with: -v
==8483== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListMinusEquals.ThreeElements" end time: Feb 11 20:52 PST
"ListMinusEquals.ThreeElements" time elapsed: 00:00:00
----------------------------------------------------------

55/110 Testing: ListMinusEquals.RemoveNoElements
55/110 Test: ListMinusEquals.RemoveNoElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListMinusEquals.RemoveNoElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListMinusEquals.RemoveNoElements" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8484== Memcheck, a memory error detector
==8484== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8484== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8484== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListMinusEquals.RemoveNoElements
==8484== 
Running main() from gtest_main.cc
Note: Google Test filter = ListMinusEquals.RemoveNoElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListMinusEquals
[ RUN      ] ListMinusEquals.RemoveNoElements
[       OK ] ListMinusEquals.RemoveNoElements (11 ms)
[----------] 1 test from ListMinusEquals (16 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (38 ms total)
[  PASSED  ] 1 test.
==8484== 
==8484== HEAP SUMMARY:
==8484==     in use at exit: 72,704 bytes in 1 blocks
==8484==   total heap usage: 323 allocs, 322 frees, 129,225 bytes allocated
==8484== 
==8484== LEAK SUMMARY:
==8484==    definitely lost: 0 bytes in 0 blocks
==8484==    indirectly lost: 0 bytes in 0 blocks
==8484==      possibly lost: 0 bytes in 0 blocks
==8484==    still reachable: 0 bytes in 0 blocks
==8484==         suppressed: 72,704 bytes in 1 blocks
==8484== 
==8484== For counts of detected and suppressed errors, rerun with: -v
==8484== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListMinusEquals.RemoveNoElements" end time: Feb 11 20:52 PST
"ListMinusEquals.RemoveNoElements" time elapsed: 00:00:00
----------------------------------------------------------

56/110 Testing: ListMinusEquals.RemoveAllElements
56/110 Test: ListMinusEquals.RemoveAllElements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListMinusEquals.RemoveAllElements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListMinusEquals.RemoveAllElements" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8485== Memcheck, a memory error detector
==8485== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8485== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8485== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListMinusEquals.RemoveAllElements
==8485== 
Running main() from gtest_main.cc
Note: Google Test filter = ListMinusEquals.RemoveAllElements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListMinusEquals
[ RUN      ] ListMinusEquals.RemoveAllElements
[       OK ] ListMinusEquals.RemoveAllElements (9 ms)
[----------] 1 test from ListMinusEquals (14 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8485== 
==8485== HEAP SUMMARY:
==8485==     in use at exit: 72,704 bytes in 1 blocks
==8485==   total heap usage: 323 allocs, 322 frees, 129,253 bytes allocated
==8485== 
==8485== LEAK SUMMARY:
==8485==    definitely lost: 0 bytes in 0 blocks
==8485==    indirectly lost: 0 bytes in 0 blocks
==8485==      possibly lost: 0 bytes in 0 blocks
==8485==    still reachable: 0 bytes in 0 blocks
==8485==         suppressed: 72,704 bytes in 1 blocks
==8485== 
==8485== For counts of detected and suppressed errors, rerun with: -v
==8485== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListMinusEquals.RemoveAllElements" end time: Feb 11 20:52 PST
"ListMinusEquals.RemoveAllElements" time elapsed: 00:00:00
----------------------------------------------------------

57/110 Testing: ListMinusEquals.15Elements
57/110 Test: ListMinusEquals.15Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListMinusEquals.15Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListMinusEquals.15Elements" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8486== Memcheck, a memory error detector
==8486== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8486== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8486== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListMinusEquals.15Elements
==8486== 
Running main() from gtest_main.cc
Note: Google Test filter = ListMinusEquals.15Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListMinusEquals
[ RUN      ] ListMinusEquals.15Elements
[       OK ] ListMinusEquals.15Elements (45 ms)
[----------] 1 test from ListMinusEquals (50 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (73 ms total)
[  PASSED  ] 1 test.
==8486== 
==8486== HEAP SUMMARY:
==8486==     in use at exit: 72,704 bytes in 1 blocks
==8486==   total heap usage: 342 allocs, 341 frees, 131,470 bytes allocated
==8486== 
==8486== LEAK SUMMARY:
==8486==    definitely lost: 0 bytes in 0 blocks
==8486==    indirectly lost: 0 bytes in 0 blocks
==8486==      possibly lost: 0 bytes in 0 blocks
==8486==    still reachable: 0 bytes in 0 blocks
==8486==         suppressed: 72,704 bytes in 1 blocks
==8486== 
==8486== For counts of detected and suppressed errors, rerun with: -v
==8486== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.59 sec
----------------------------------------------------------
Test Passed.
"ListMinusEquals.15Elements" end time: Feb 11 20:52 PST
"ListMinusEquals.15Elements" time elapsed: 00:00:00
----------------------------------------------------------

58/110 Testing: ListBracket.OneElement
58/110 Test: ListBracket.OneElement
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListBracket.OneElement"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListBracket.OneElement" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8487== Memcheck, a memory error detector
==8487== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8487== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8487== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListBracket.OneElement
==8487== 
Running main() from gtest_main.cc
Note: Google Test filter = ListBracket.OneElement
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListBracket
[ RUN      ] ListBracket.OneElement
[       OK ] ListBracket.OneElement (8 ms)
[----------] 1 test from ListBracket (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (35 ms total)
[  PASSED  ] 1 test.
==8487== 
==8487== HEAP SUMMARY:
==8487==     in use at exit: 72,704 bytes in 1 blocks
==8487==   total heap usage: 323 allocs, 322 frees, 129,113 bytes allocated
==8487== 
==8487== LEAK SUMMARY:
==8487==    definitely lost: 0 bytes in 0 blocks
==8487==    indirectly lost: 0 bytes in 0 blocks
==8487==      possibly lost: 0 bytes in 0 blocks
==8487==    still reachable: 0 bytes in 0 blocks
==8487==         suppressed: 72,704 bytes in 1 blocks
==8487== 
==8487== For counts of detected and suppressed errors, rerun with: -v
==8487== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"ListBracket.OneElement" end time: Feb 11 20:52 PST
"ListBracket.OneElement" time elapsed: 00:00:00
----------------------------------------------------------

59/110 Testing: ListBracket.ElementAssignment
59/110 Test: ListBracket.ElementAssignment
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests" "--gtest_filter=ListBracket.ElementAssignment"
Directory: /home/cs104/cs104_test/hw3/hw3_check/operators_tests
"ListBracket.ElementAssignment" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8488== Memcheck, a memory error detector
==8488== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8488== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8488== Command: /home/cs104/cs104_test/hw3/hw3_check/operators_tests/operators_tests --gtest_filter=ListBracket.ElementAssignment
==8488== 
Running main() from gtest_main.cc
Note: Google Test filter = ListBracket.ElementAssignment
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from ListBracket
[ RUN      ] ListBracket.ElementAssignment
[       OK ] ListBracket.ElementAssignment (9 ms)
[----------] 1 test from ListBracket (13 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (36 ms total)
[  PASSED  ] 1 test.
==8488== 
==8488== HEAP SUMMARY:
==8488==     in use at exit: 72,704 bytes in 1 blocks
==8488==   total heap usage: 323 allocs, 322 frees, 129,162 bytes allocated
==8488== 
==8488== LEAK SUMMARY:
==8488==    definitely lost: 0 bytes in 0 blocks
==8488==    indirectly lost: 0 bytes in 0 blocks
==8488==      possibly lost: 0 bytes in 0 blocks
==8488==    still reachable: 0 bytes in 0 blocks
==8488==         suppressed: 72,704 bytes in 1 blocks
==8488== 
==8488== For counts of detected and suppressed errors, rerun with: -v
==8488== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"ListBracket.ElementAssignment" end time: Feb 11 20:52 PST
"ListBracket.ElementAssignment" time elapsed: 00:00:00
----------------------------------------------------------

60/110 Testing: Stack.Empty
60/110 Test: Stack.Empty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.Empty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.Empty" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8489== Memcheck, a memory error detector
==8489== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8489== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8489== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.Empty
==8489== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.Empty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.Empty
[       OK ] Stack.Empty (7 ms)
[----------] 1 test from Stack (12 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (34 ms total)
[  PASSED  ] 1 test.
==8489== 
==8489== HEAP SUMMARY:
==8489==     in use at exit: 72,704 bytes in 1 blocks
==8489==   total heap usage: 211 allocs, 210 frees, 123,390 bytes allocated
==8489== 
==8489== LEAK SUMMARY:
==8489==    definitely lost: 0 bytes in 0 blocks
==8489==    indirectly lost: 0 bytes in 0 blocks
==8489==      possibly lost: 0 bytes in 0 blocks
==8489==    still reachable: 0 bytes in 0 blocks
==8489==         suppressed: 72,704 bytes in 1 blocks
==8489== 
==8489== For counts of detected and suppressed errors, rerun with: -v
==8489== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.55 sec
----------------------------------------------------------
Test Passed.
"Stack.Empty" end time: Feb 11 20:52 PST
"Stack.Empty" time elapsed: 00:00:00
----------------------------------------------------------

61/110 Testing: Stack.TopEmpty
61/110 Test: Stack.TopEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.TopEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.TopEmpty" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8490== Memcheck, a memory error detector
==8490== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8490== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8490== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.TopEmpty
==8490== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.TopEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.TopEmpty
[       OK ] Stack.TopEmpty (29 ms)
[----------] 1 test from Stack (34 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (57 ms total)
[  PASSED  ] 1 test.
==8490== 
==8490== HEAP SUMMARY:
==8490==     in use at exit: 72,704 bytes in 1 blocks
==8490==   total heap usage: 213 allocs, 212 frees, 123,594 bytes allocated
==8490== 
==8490== LEAK SUMMARY:
==8490==    definitely lost: 0 bytes in 0 blocks
==8490==    indirectly lost: 0 bytes in 0 blocks
==8490==      possibly lost: 0 bytes in 0 blocks
==8490==    still reachable: 0 bytes in 0 blocks
==8490==         suppressed: 72,704 bytes in 1 blocks
==8490== 
==8490== For counts of detected and suppressed errors, rerun with: -v
==8490== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"Stack.TopEmpty" end time: Feb 11 20:52 PST
"Stack.TopEmpty" time elapsed: 00:00:00
----------------------------------------------------------

62/110 Testing: Stack.OneElementPush
62/110 Test: Stack.OneElementPush
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.OneElementPush"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.OneElementPush" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8492== Memcheck, a memory error detector
==8492== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8492== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8492== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.OneElementPush
==8492== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.OneElementPush
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.OneElementPush
[       OK ] Stack.OneElementPush (11 ms)
[----------] 1 test from Stack (16 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (38 ms total)
[  PASSED  ] 1 test.
==8492== 
==8492== HEAP SUMMARY:
==8492==     in use at exit: 72,704 bytes in 1 blocks
==8492==   total heap usage: 223 allocs, 222 frees, 124,146 bytes allocated
==8492== 
==8492== LEAK SUMMARY:
==8492==    definitely lost: 0 bytes in 0 blocks
==8492==    indirectly lost: 0 bytes in 0 blocks
==8492==      possibly lost: 0 bytes in 0 blocks
==8492==    still reachable: 0 bytes in 0 blocks
==8492==         suppressed: 72,704 bytes in 1 blocks
==8492== 
==8492== For counts of detected and suppressed errors, rerun with: -v
==8492== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.55 sec
----------------------------------------------------------
Test Passed.
"Stack.OneElementPush" end time: Feb 11 20:52 PST
"Stack.OneElementPush" time elapsed: 00:00:00
----------------------------------------------------------

63/110 Testing: Stack.FiveElementPush
63/110 Test: Stack.FiveElementPush
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.FiveElementPush"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.FiveElementPush" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8493== Memcheck, a memory error detector
==8493== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8493== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8493== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.FiveElementPush
==8493== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.FiveElementPush
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.FiveElementPush
[       OK ] Stack.FiveElementPush (17 ms)
[----------] 1 test from Stack (21 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (44 ms total)
[  PASSED  ] 1 test.
==8493== 
==8493== HEAP SUMMARY:
==8493==     in use at exit: 72,704 bytes in 1 blocks
==8493==   total heap usage: 223 allocs, 222 frees, 124,153 bytes allocated
==8493== 
==8493== LEAK SUMMARY:
==8493==    definitely lost: 0 bytes in 0 blocks
==8493==    indirectly lost: 0 bytes in 0 blocks
==8493==      possibly lost: 0 bytes in 0 blocks
==8493==    still reachable: 0 bytes in 0 blocks
==8493==         suppressed: 72,704 bytes in 1 blocks
==8493== 
==8493== For counts of detected and suppressed errors, rerun with: -v
==8493== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.57 sec
----------------------------------------------------------
Test Passed.
"Stack.FiveElementPush" end time: Feb 11 20:52 PST
"Stack.FiveElementPush" time elapsed: 00:00:00
----------------------------------------------------------

64/110 Testing: Stack.OneElementPop
64/110 Test: Stack.OneElementPop
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.OneElementPop"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.OneElementPop" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8494== Memcheck, a memory error detector
==8494== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8494== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8494== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.OneElementPop
==8494== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.OneElementPop
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.OneElementPop
[       OK ] Stack.OneElementPop (10 ms)
[----------] 1 test from Stack (15 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (37 ms total)
[  PASSED  ] 1 test.
==8494== 
==8494== HEAP SUMMARY:
==8494==     in use at exit: 72,704 bytes in 1 blocks
==8494==   total heap usage: 223 allocs, 222 frees, 124,139 bytes allocated
==8494== 
==8494== LEAK SUMMARY:
==8494==    definitely lost: 0 bytes in 0 blocks
==8494==    indirectly lost: 0 bytes in 0 blocks
==8494==      possibly lost: 0 bytes in 0 blocks
==8494==    still reachable: 0 bytes in 0 blocks
==8494==         suppressed: 72,704 bytes in 1 blocks
==8494== 
==8494== For counts of detected and suppressed errors, rerun with: -v
==8494== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.55 sec
----------------------------------------------------------
Test Passed.
"Stack.OneElementPop" end time: Feb 11 20:52 PST
"Stack.OneElementPop" time elapsed: 00:00:00
----------------------------------------------------------

65/110 Testing: Stack.FiveElementPop
65/110 Test: Stack.FiveElementPop
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.FiveElementPop"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.FiveElementPop" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8495== Memcheck, a memory error detector
==8495== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8495== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8495== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.FiveElementPop
==8495== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.FiveElementPop
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.FiveElementPop
[       OK ] Stack.FiveElementPop (18 ms)
[----------] 1 test from Stack (22 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (46 ms total)
[  PASSED  ] 1 test.
==8495== 
==8495== HEAP SUMMARY:
==8495==     in use at exit: 72,704 bytes in 1 blocks
==8495==   total heap usage: 223 allocs, 222 frees, 124,146 bytes allocated
==8495== 
==8495== LEAK SUMMARY:
==8495==    definitely lost: 0 bytes in 0 blocks
==8495==    indirectly lost: 0 bytes in 0 blocks
==8495==      possibly lost: 0 bytes in 0 blocks
==8495==    still reachable: 0 bytes in 0 blocks
==8495==         suppressed: 72,704 bytes in 1 blocks
==8495== 
==8495== For counts of detected and suppressed errors, rerun with: -v
==8495== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"Stack.FiveElementPop" end time: Feb 11 20:52 PST
"Stack.FiveElementPop" time elapsed: 00:00:00
----------------------------------------------------------

66/110 Testing: Stack.PopEmpty
66/110 Test: Stack.PopEmpty
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.PopEmpty"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.PopEmpty" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8496== Memcheck, a memory error detector
==8496== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8496== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8496== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.PopEmpty
==8496== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.PopEmpty
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.PopEmpty
[       OK ] Stack.PopEmpty (7 ms)
[----------] 1 test from Stack (11 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (34 ms total)
[  PASSED  ] 1 test.
==8496== 
==8496== HEAP SUMMARY:
==8496==     in use at exit: 72,704 bytes in 1 blocks
==8496==   total heap usage: 211 allocs, 210 frees, 123,411 bytes allocated
==8496== 
==8496== LEAK SUMMARY:
==8496==    definitely lost: 0 bytes in 0 blocks
==8496==    indirectly lost: 0 bytes in 0 blocks
==8496==      possibly lost: 0 bytes in 0 blocks
==8496==    still reachable: 0 bytes in 0 blocks
==8496==         suppressed: 72,704 bytes in 1 blocks
==8496== 
==8496== For counts of detected and suppressed errors, rerun with: -v
==8496== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.55 sec
----------------------------------------------------------
Test Passed.
"Stack.PopEmpty" end time: Feb 11 20:52 PST
"Stack.PopEmpty" time elapsed: 00:00:00
----------------------------------------------------------

67/110 Testing: Stack.PopThenAdd
67/110 Test: Stack.PopThenAdd
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=Stack.PopThenAdd"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"Stack.PopThenAdd" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8497== Memcheck, a memory error detector
==8497== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8497== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8497== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=Stack.PopThenAdd
==8497== 
Running main() from gtest_main.cc
Note: Google Test filter = Stack.PopThenAdd
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from Stack
[ RUN      ] Stack.PopThenAdd
[       OK ] Stack.PopThenAdd (20 ms)
[----------] 1 test from Stack (24 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (47 ms total)
[  PASSED  ] 1 test.
==8497== 
==8497== HEAP SUMMARY:
==8497==     in use at exit: 72,704 bytes in 1 blocks
==8497==   total heap usage: 223 allocs, 222 frees, 124,118 bytes allocated
==8497== 
==8497== LEAK SUMMARY:
==8497==    definitely lost: 0 bytes in 0 blocks
==8497==    indirectly lost: 0 bytes in 0 blocks
==8497==      possibly lost: 0 bytes in 0 blocks
==8497==    still reachable: 0 bytes in 0 blocks
==8497==         suppressed: 72,704 bytes in 1 blocks
==8497== 
==8497== For counts of detected and suppressed errors, rerun with: -v
==8497== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.56 sec
----------------------------------------------------------
Test Passed.
"Stack.PopThenAdd" end time: Feb 11 20:52 PST
"Stack.PopThenAdd" time elapsed: 00:00:00
----------------------------------------------------------

68/110 Testing: StackStress.50x50Elements
68/110 Test: StackStress.50x50Elements
Command: "/usr/bin/valgrind" "--tool=memcheck" "--leak-check=yes" "--trace-children=no" "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests" "--gtest_filter=StackStress.50x50Elements"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"StackStress.50x50Elements" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
==8498== Memcheck, a memory error detector
==8498== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8498== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==8498== Command: /home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_tests --gtest_filter=StackStress.50x50Elements
==8498== 
Running main() from gtest_main.cc
Note: Google Test filter = StackStress.50x50Elements
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StackStress
[ RUN      ] StackStress.50x50Elements
[       OK ] StackStress.50x50Elements (105 ms)
[----------] 1 test from StackStress (109 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (139 ms total)
[  PASSED  ] 1 test.
==8498== 
==8498== HEAP SUMMARY:
==8498==     in use at exit: 72,704 bytes in 1 blocks
==8498==   total heap usage: 573 allocs, 572 frees, 294,029 bytes allocated
==8498== 
==8498== LEAK SUMMARY:
==8498==    definitely lost: 0 bytes in 0 blocks
==8498==    indirectly lost: 0 bytes in 0 blocks
==8498==      possibly lost: 0 bytes in 0 blocks
==8498==    still reachable: 0 bytes in 0 blocks
==8498==         suppressed: 72,704 bytes in 1 blocks
==8498== 
==8498== For counts of detected and suppressed errors, rerun with: -v
==8498== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
<end of output>
Test time =   0.65 sec
----------------------------------------------------------
Test Passed.
"StackStress.50x50Elements" end time: Feb 11 20:52 PST
"StackStress.50x50Elements" time elapsed: 00:00:00
----------------------------------------------------------

69/110 Testing: StackRuntime.Push
69/110 Test: StackRuntime.Push
Command: "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_runtime_tests" "--gtest_filter=StackRuntime.Push"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"StackRuntime.Push" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StackRuntime.Push
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StackRuntime
[ RUN      ] StackRuntime.Push
>> Evaluating runtime of StackString::push
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.1048) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (2.7644) is >= threshold (1.4000)
>> Time complexity of StackString::push is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.2685) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.2910) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.0433) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0345) is < threshold (1.4000)
[       OK ] StackRuntime.Push (974 ms)
[----------] 1 test from StackRuntime (974 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (974 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.98 sec
----------------------------------------------------------
Test Passed.
"StackRuntime.Push" end time: Feb 11 20:52 PST
"StackRuntime.Push" time elapsed: 00:00:00
----------------------------------------------------------

70/110 Testing: StackRuntime.Pop
70/110 Test: StackRuntime.Pop
Command: "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_runtime_tests" "--gtest_filter=StackRuntime.Pop"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"StackRuntime.Pop" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StackRuntime.Pop
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StackRuntime
[ RUN      ] StackRuntime.Pop
>> Evaluating runtime of StackString::pop
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.3938) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (1.6361) is >= threshold (1.4000)
>> Time complexity of StackString::pop is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.6507) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.2974) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.1289) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0806) is < threshold (1.4000)
[       OK ] StackRuntime.Pop (957 ms)
[----------] 1 test from StackRuntime (957 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (957 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.96 sec
----------------------------------------------------------
Test Passed.
"StackRuntime.Pop" end time: Feb 11 20:52 PST
"StackRuntime.Pop" time elapsed: 00:00:00
----------------------------------------------------------

71/110 Testing: StackRuntime.Top
71/110 Test: StackRuntime.Top
Command: "/home/cs104/cs104_test/hw3/hw3_check/stack_tests/stack_runtime_tests" "--gtest_filter=StackRuntime.Top"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stack_tests
"StackRuntime.Top" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StackRuntime.Top
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StackRuntime
[ RUN      ] StackRuntime.Top
>> Evaluating runtime of StackString::top
Testing with 2^0 (1) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^1 (2) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^2 (4) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^3 (8) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^4 (16) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^5 (32) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^6 (64) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^7 (128) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^8 (256) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^9 (512) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^10 (1024) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^11 (2048) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^12 (4096) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^13 (8192) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^14 (16384) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^15 (32768) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^16 (65536) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^17 (131072) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing with 2^18 (262144) elements (trial 1/30)2/30)3/30)4/30)5/30)6/30)7/30)8/30)9/30)10/30)11/30)12/30)13/30)14/30)15/30)16/30)17/30)18/30)19/30)20/30)21/30)22/30)23/30)24/30)25/30)26/30)27/30)28/30)29/30)30/30)
Testing if time complexity could be linear...
Correlation factor (0.2651) is < threshold (1.4000)
Testing if time complexity could be constant...
Correlation factor (1.9914) is >= threshold (1.4000)
>> Time complexity of StackString::top is likely constant
Testing if time complexity could be logarithmic...
Correlation factor (0.5929) is < threshold (1.4000)
Testing if time complexity could be linearithmic...
Correlation factor (-0.3232) is < threshold (1.4000)
Testing if time complexity could be quadratic...
Correlation factor (0.0942) is < threshold (1.4000)
Testing if time complexity could be cubic...
Correlation factor (0.0608) is < threshold (1.4000)
[       OK ] StackRuntime.Top (960 ms)
[----------] 1 test from StackRuntime (960 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (960 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.96 sec
----------------------------------------------------------
Test Passed.
"StackRuntime.Top" end time: Feb 11 20:52 PST
"StackRuntime.Top" time elapsed: 00:00:00
----------------------------------------------------------

72/110 Testing: StringParser.UltraBasic
72/110 Test: StringParser.UltraBasic
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.UltraBasic"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.UltraBasic" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.UltraBasic
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.UltraBasic
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/UltraBasic/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/UltraBasic/output.txt
SUCCESS: "a" was correctly parsed to "a"
[       OK ] StringParser.UltraBasic (457 ms)
[----------] 1 test from StringParser (457 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (457 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParser.UltraBasic" end time: Feb 11 20:52 PST
"StringParser.UltraBasic" time elapsed: 00:00:00
----------------------------------------------------------

73/110 Testing: StringParser.BlankLine
73/110 Test: StringParser.BlankLine
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.BlankLine"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.BlankLine" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.BlankLine
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.BlankLine
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/BlankLine/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/BlankLine/output.txt
SUCCESS: "" was correctly parsed to ""
[       OK ] StringParser.BlankLine (441 ms)
[----------] 1 test from StringParser (441 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (441 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.44 sec
----------------------------------------------------------
Test Passed.
"StringParser.BlankLine" end time: Feb 11 20:52 PST
"StringParser.BlankLine" time elapsed: 00:00:00
----------------------------------------------------------

74/110 Testing: StringParser.OneRemStart
74/110 Test: StringParser.OneRemStart
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.OneRemStart"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.OneRemStart" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.OneRemStart
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.OneRemStart
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/OneRemStart/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/OneRemStart/output.txt
SUCCESS: ">string" was correctly parsed to "tring"
[       OK ] StringParser.OneRemStart (464 ms)
[----------] 1 test from StringParser (464 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (464 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.OneRemStart" end time: Feb 11 20:52 PST
"StringParser.OneRemStart" time elapsed: 00:00:00
----------------------------------------------------------

75/110 Testing: StringParser.TwoRemStart
75/110 Test: StringParser.TwoRemStart
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.TwoRemStart"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.TwoRemStart" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.TwoRemStart
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.TwoRemStart
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/TwoRemStart/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/TwoRemStart/output.txt
SUCCESS: ">>astring" was correctly parsed to "tring"
[       OK ] StringParser.TwoRemStart (465 ms)
[----------] 1 test from StringParser (465 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (465 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.TwoRemStart" end time: Feb 11 20:52 PST
"StringParser.TwoRemStart" time elapsed: 00:00:00
----------------------------------------------------------

76/110 Testing: StringParser.OneRemBack
76/110 Test: StringParser.OneRemBack
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.OneRemBack"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.OneRemBack" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.OneRemBack
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.OneRemBack
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/OneRemBack/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/OneRemBack/output.txt
SUCCESS: "<string" was correctly parsed to "strin"
[       OK ] StringParser.OneRemBack (463 ms)
[----------] 1 test from StringParser (463 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (463 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParser.OneRemBack" end time: Feb 11 20:52 PST
"StringParser.OneRemBack" time elapsed: 00:00:00
----------------------------------------------------------

77/110 Testing: StringParser.SimpleAddition
77/110 Test: StringParser.SimpleAddition
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.SimpleAddition"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.SimpleAddition" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.SimpleAddition
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.SimpleAddition
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/SimpleAddition/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/SimpleAddition/output.txt
SUCCESS: "(a+b)" was correctly parsed to "ab"
[       OK ] StringParser.SimpleAddition (466 ms)
[----------] 1 test from StringParser (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.SimpleAddition" end time: Feb 11 20:52 PST
"StringParser.SimpleAddition" time elapsed: 00:00:00
----------------------------------------------------------

78/110 Testing: StringParser.QuadAddition
78/110 Test: StringParser.QuadAddition
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.QuadAddition"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.QuadAddition" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.QuadAddition
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.QuadAddition
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/QuadAddition/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/QuadAddition/output.txt
SUCCESS: "(a + b + c + d)" was correctly parsed to "abcd"
[       OK ] StringParser.QuadAddition (466 ms)
[----------] 1 test from StringParser (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.QuadAddition" end time: Feb 11 20:52 PST
"StringParser.QuadAddition" time elapsed: 00:00:00
----------------------------------------------------------

79/110 Testing: StringParser.NestedAddition
79/110 Test: StringParser.NestedAddition
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NestedAddition"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NestedAddition" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NestedAddition
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NestedAddition
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedAddition/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedAddition/output.txt
SUCCESS: "( a + ( b + cde ) )" was correctly parsed to "abcde"
[       OK ] StringParser.NestedAddition (468 ms)
[----------] 1 test from StringParser (468 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (468 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NestedAddition" end time: Feb 11 20:52 PST
"StringParser.NestedAddition" time elapsed: 00:00:00
----------------------------------------------------------

80/110 Testing: StringParser.MultiNestedAddition
80/110 Test: StringParser.MultiNestedAddition
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.MultiNestedAddition"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.MultiNestedAddition" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.MultiNestedAddition
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.MultiNestedAddition
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiNestedAddition/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiNestedAddition/output.txt
SUCCESS: "(( a + b ) + ( c + def) )" was correctly parsed to "abcdef"
[       OK ] StringParser.MultiNestedAddition (480 ms)
[----------] 1 test from StringParser (480 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (480 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.48 sec
----------------------------------------------------------
Test Passed.
"StringParser.MultiNestedAddition" end time: Feb 11 20:52 PST
"StringParser.MultiNestedAddition" time elapsed: 00:00:00
----------------------------------------------------------

81/110 Testing: StringParser.NoopSubtraction
81/110 Test: StringParser.NoopSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NoopSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NoopSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NoopSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NoopSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoopSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoopSubtraction/output.txt
SUCCESS: "(a - b)" was correctly parsed to "a"
[       OK ] StringParser.NoopSubtraction (464 ms)
[----------] 1 test from StringParser (464 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (464 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NoopSubtraction" end time: Feb 11 20:52 PST
"StringParser.NoopSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

82/110 Testing: StringParser.SimpleSubtraction
82/110 Test: StringParser.SimpleSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.SimpleSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.SimpleSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.SimpleSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.SimpleSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/SimpleSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/SimpleSubtraction/output.txt
SUCCESS: "(abc - c)" was correctly parsed to "ab"
[       OK ] StringParser.SimpleSubtraction (466 ms)
[----------] 1 test from StringParser (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.SimpleSubtraction" end time: Feb 11 20:52 PST
"StringParser.SimpleSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

83/110 Testing: StringParser.MultiCharSubtraction
83/110 Test: StringParser.MultiCharSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.MultiCharSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.MultiCharSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.MultiCharSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.MultiCharSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiCharSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiCharSubtraction/output.txt
SUCCESS: "(abcdefg - bcdefg )" was correctly parsed to "a"
[       OK ] StringParser.MultiCharSubtraction (467 ms)
[----------] 1 test from StringParser (467 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (467 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.MultiCharSubtraction" end time: Feb 11 20:52 PST
"StringParser.MultiCharSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

84/110 Testing: StringParser.InnerTextSubtraction
84/110 Test: StringParser.InnerTextSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.InnerTextSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.InnerTextSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.InnerTextSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.InnerTextSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/InnerTextSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/InnerTextSubtraction/output.txt
SUCCESS: "( abcdefghij - bcd)" was correctly parsed to "aefghij"
[       OK ] StringParser.InnerTextSubtraction (472 ms)
[----------] 1 test from StringParser (472 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (472 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.InnerTextSubtraction" end time: Feb 11 20:52 PST
"StringParser.InnerTextSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

85/110 Testing: StringParser.RepeatedTextSubtraction
85/110 Test: StringParser.RepeatedTextSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.RepeatedTextSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.RepeatedTextSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.RepeatedTextSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.RepeatedTextSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/RepeatedTextSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/RepeatedTextSubtraction/output.txt
SUCCESS: "( abcabcabcabc - bc )" was correctly parsed to "aabcabcabc"
[       OK ] StringParser.RepeatedTextSubtraction (469 ms)
[----------] 1 test from StringParser (469 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (469 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.RepeatedTextSubtraction" end time: Feb 11 20:52 PST
"StringParser.RepeatedTextSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

86/110 Testing: StringParser.NestedSubtraction
86/110 Test: StringParser.NestedSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NestedSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NestedSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NestedSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NestedSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedSubtraction/output.txt
SUCCESS: "( abcdefg - (bcdef - ( cdef - f)))" was correctly parsed to "abcdefg"
[       OK ] StringParser.NestedSubtraction (468 ms)
[----------] 1 test from StringParser (468 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (468 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NestedSubtraction" end time: Feb 11 20:52 PST
"StringParser.NestedSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

87/110 Testing: StringParser.MultiNestedSubtraction
87/110 Test: StringParser.MultiNestedSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.MultiNestedSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.MultiNestedSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.MultiNestedSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.MultiNestedSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiNestedSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultiNestedSubtraction/output.txt
SUCCESS: "( ( input - in ) - ( txt - xt) )" was correctly parsed to "pu"
[       OK ] StringParser.MultiNestedSubtraction (468 ms)
[----------] 1 test from StringParser (468 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (468 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.MultiNestedSubtraction" end time: Feb 11 20:52 PST
"StringParser.MultiNestedSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

88/110 Testing: StringParser.NestedSubtraction2
88/110 Test: StringParser.NestedSubtraction2
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NestedSubtraction2"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NestedSubtraction2" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NestedSubtraction2
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NestedSubtraction2
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedSubtraction2/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedSubtraction2/output.txt
SUCCESS: "( abcdeg - (abc - c) )" was correctly parsed to "cdeg"
[       OK ] StringParser.NestedSubtraction2 (472 ms)
[----------] 1 test from StringParser (472 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (472 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NestedSubtraction2" end time: Feb 11 20:52 PST
"StringParser.NestedSubtraction2" time elapsed: 00:00:00
----------------------------------------------------------

89/110 Testing: StringParser.Example1
89/110 Test: StringParser.Example1
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.Example1"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.Example1" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.Example1
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.Example1
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example1/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example1/output.txt
SUCCESS: "(<<dagobah -(>>yoda+go ))" was correctly parsed to "b"
[       OK ] StringParser.Example1 (471 ms)
[----------] 1 test from StringParser (471 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (471 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.Example1" end time: Feb 11 20:52 PST
"StringParser.Example1" time elapsed: 00:00:00
----------------------------------------------------------

90/110 Testing: StringParser.Example2
90/110 Test: StringParser.Example2
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.Example2"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.Example2" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.Example2
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.Example2
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example2/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example2/output.txt
SUCCESS: "<> <<<((eve + boo+buzz)  - ( >< <nemo))" was correctly parsed to "eboo"
[       OK ] StringParser.Example2 (471 ms)
[----------] 1 test from StringParser (471 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (471 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.Example2" end time: Feb 11 20:52 PST
"StringParser.Example2" time elapsed: 00:00:00
----------------------------------------------------------

91/110 Testing: StringParser.Example3
91/110 Test: StringParser.Example3
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.Example3"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.Example3" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.Example3
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.Example3
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example3/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example3/output.txt
SUCCESS: "<>((<<mario + >>zelda)- ><samus)" was correctly parsed to "arld"
[       OK ] StringParser.Example3 (470 ms)
[----------] 1 test from StringParser (470 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (470 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.Example3" end time: Feb 11 20:52 PST
"StringParser.Example3" time elapsed: 00:00:00
----------------------------------------------------------

92/110 Testing: StringParser.GeneralMix
92/110 Test: StringParser.GeneralMix
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.GeneralMix"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.GeneralMix" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.GeneralMix
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.GeneralMix
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/GeneralMix/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/GeneralMix/output.txt
SUCCESS: "<> ((malformed + case + that)  -  >< took) " was correctly parsed to "alformedcasetha"
[       OK ] StringParser.GeneralMix (478 ms)
[----------] 1 test from StringParser (478 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (478 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.48 sec
----------------------------------------------------------
Test Passed.
"StringParser.GeneralMix" end time: Feb 11 20:52 PST
"StringParser.GeneralMix" time elapsed: 00:00:00
----------------------------------------------------------

93/110 Testing: StringParser.NestedParenthesis
93/110 Test: StringParser.NestedParenthesis
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NestedParenthesis"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NestedParenthesis" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NestedParenthesis
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NestedParenthesis
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedParenthesis/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedParenthesis/output.txt
SUCCESS: "((< to +write)) " was correctly parsed to "twrite"
[       OK ] StringParser.NestedParenthesis (469 ms)
[----------] 1 test from StringParser (469 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (469 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NestedParenthesis" end time: Feb 11 20:52 PST
"StringParser.NestedParenthesis" time elapsed: 00:00:00
----------------------------------------------------------

94/110 Testing: StringParser.UnaryBinaryPrecedence
94/110 Test: StringParser.UnaryBinaryPrecedence
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.UnaryBinaryPrecedence"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.UnaryBinaryPrecedence" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.UnaryBinaryPrecedence
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.UnaryBinaryPrecedence
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/UnaryBinaryPrecedence/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/UnaryBinaryPrecedence/output.txt
SUCCESS: "(<<(>>which + <<operates) - >><<first)" was correctly parsed to "ichope"
[       OK ] StringParser.UnaryBinaryPrecedence (472 ms)
[----------] 1 test from StringParser (472 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (472 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.UnaryBinaryPrecedence" end time: Feb 11 20:52 PST
"StringParser.UnaryBinaryPrecedence" time elapsed: 00:00:00
----------------------------------------------------------

95/110 Testing: StringParser.Multiline
95/110 Test: StringParser.Multiline
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.Multiline"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.Multiline" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.Multiline
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.Multiline
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Multiline/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Multiline/output.txt
[       OK ] StringParser.Multiline (472 ms)
[----------] 1 test from StringParser (472 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (472 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.Multiline" end time: Feb 11 20:52 PST
"StringParser.Multiline" time elapsed: 00:00:00
----------------------------------------------------------

96/110 Testing: StringParser.NoParenthesis
96/110 Test: StringParser.NoParenthesis
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParser.NoParenthesis"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParser.NoParenthesis" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParser.NoParenthesis
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParser
[ RUN      ] StringParser.NoParenthesis
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoParenthesis/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoParenthesis/output.txt
SUCCESS: "noparens" was correctly parsed to "noparens"
[       OK ] StringParser.NoParenthesis (468 ms)
[----------] 1 test from StringParser (468 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (468 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParser.NoParenthesis" end time: Feb 11 20:52 PST
"StringParser.NoParenthesis" time elapsed: 00:00:00
----------------------------------------------------------

97/110 Testing: StringParserMalformed.Capitals
97/110 Test: StringParserMalformed.Capitals
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.Capitals"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.Capitals" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.Capitals
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.Capitals
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Capitals/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Capitals/output.txt
SUCCESS: "(AAAARGH)" was correctly detected as Malformed
[       OK ] StringParserMalformed.Capitals (449 ms)
[----------] 1 test from StringParserMalformed (449 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (449 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.45 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.Capitals" end time: Feb 11 20:52 PST
"StringParserMalformed.Capitals" time elapsed: 00:00:00
----------------------------------------------------------

98/110 Testing: StringParserMalformed.MixedOperators
98/110 Test: StringParserMalformed.MixedOperators
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.MixedOperators"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.MixedOperators" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.MixedOperators
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.MixedOperators
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MixedOperators/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MixedOperators/output.txt
SUCCESS: "(mixed + up - operators)" was correctly detected as Malformed
[       OK ] StringParserMalformed.MixedOperators (463 ms)
[----------] 1 test from StringParserMalformed (463 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (463 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.MixedOperators" end time: Feb 11 20:52 PST
"StringParserMalformed.MixedOperators" time elapsed: 00:00:00
----------------------------------------------------------

99/110 Testing: StringParserMalformed.MultipleSubtraction
99/110 Test: StringParserMalformed.MultipleSubtraction
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.MultipleSubtraction"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.MultipleSubtraction" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.MultipleSubtraction
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.MultipleSubtraction
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultipleSubtraction/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MultipleSubtraction/output.txt
SUCCESS: "(multiple - minus - here)" was correctly detected as Malformed
[       OK ] StringParserMalformed.MultipleSubtraction (466 ms)
[----------] 1 test from StringParserMalformed (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.MultipleSubtraction" end time: Feb 11 20:52 PST
"StringParserMalformed.MultipleSubtraction" time elapsed: 00:00:00
----------------------------------------------------------

100/110 Testing: StringParserMalformed.NoParenthesisAddition
100/110 Test: StringParserMalformed.NoParenthesisAddition
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.NoParenthesisAddition"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.NoParenthesisAddition" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.NoParenthesisAddition
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.NoParenthesisAddition
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoParenthesisAddition/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NoParenthesisAddition/output.txt
SUCCESS: "no + prenthesis + add" was correctly detected as Malformed
[       OK ] StringParserMalformed.NoParenthesisAddition (462 ms)
[----------] 1 test from StringParserMalformed (462 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (462 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.NoParenthesisAddition" end time: Feb 11 20:52 PST
"StringParserMalformed.NoParenthesisAddition" time elapsed: 00:00:00
----------------------------------------------------------

101/110 Testing: StringParserMalformed.ExtraOperators
101/110 Test: StringParserMalformed.ExtraOperators
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.ExtraOperators"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.ExtraOperators" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.ExtraOperators
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.ExtraOperators
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/ExtraOperators/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/ExtraOperators/output.txt
SUCCESS: "( + extra + operator + here)" was correctly detected as Malformed
[       OK ] StringParserMalformed.ExtraOperators (466 ms)
[----------] 1 test from StringParserMalformed (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.ExtraOperators" end time: Feb 11 20:52 PST
"StringParserMalformed.ExtraOperators" time elapsed: 00:00:00
----------------------------------------------------------

102/110 Testing: StringParserMalformed.Example1
102/110 Test: StringParserMalformed.Example1
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.Example1"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.Example1" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.Example1
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.Example1
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example1/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example1/output.txt
SUCCESS: "((<mccoy+sulu)" was correctly detected as Malformed
[       OK ] StringParserMalformed.Example1 (466 ms)
[----------] 1 test from StringParserMalformed (466 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (466 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.Example1" end time: Feb 11 20:52 PST
"StringParserMalformed.Example1" time elapsed: 00:00:00
----------------------------------------------------------

103/110 Testing: StringParserMalformed.Example2
103/110 Test: StringParserMalformed.Example2
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.Example2"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.Example2" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.Example2
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.Example2
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example2/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example2/output.txt
SUCCESS: "(leonardo-foot+splinter)" was correctly detected as Malformed
[       OK ] StringParserMalformed.Example2 (462 ms)
[----------] 1 test from StringParserMalformed (462 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (462 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.Example2" end time: Feb 11 20:52 PST
"StringParserMalformed.Example2" time elapsed: 00:00:00
----------------------------------------------------------

104/110 Testing: StringParserMalformed.Example3
104/110 Test: StringParserMalformed.Example3
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.Example3"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.Example3" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.Example3
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.Example3
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example3/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Example3/output.txt
SUCCESS: "(+pikachu+charizard)" was correctly detected as Malformed
[       OK ] StringParserMalformed.Example3 (463 ms)
[----------] 1 test from StringParserMalformed (463 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (463 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.Example3" end time: Feb 11 20:52 PST
"StringParserMalformed.Example3" time elapsed: 00:00:00
----------------------------------------------------------

105/110 Testing: StringParserMalformed.RemoveAtEndOfString
105/110 Test: StringParserMalformed.RemoveAtEndOfString
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.RemoveAtEndOfString"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.RemoveAtEndOfString" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.RemoveAtEndOfString
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.RemoveAtEndOfString
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/RemoveAtEndOfString/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/RemoveAtEndOfString/output.txt
SUCCESS: "<(along>  -(<<with+ thefollowing )) " was correctly detected as Malformed
[       OK ] StringParserMalformed.RemoveAtEndOfString (481 ms)
[----------] 1 test from StringParserMalformed (481 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (481 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.48 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.RemoveAtEndOfString" end time: Feb 11 20:52 PST
"StringParserMalformed.RemoveAtEndOfString" time elapsed: 00:00:00
----------------------------------------------------------

106/110 Testing: StringParserMalformed.MissingParen
106/110 Test: StringParserMalformed.MissingParen
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.MissingParen"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.MissingParen" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.MissingParen
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.MissingParen
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MissingParen/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/MissingParen/output.txt
SUCCESS: "(malformed - ornot" was correctly detected as Malformed
[       OK ] StringParserMalformed.MissingParen (462 ms)
[----------] 1 test from StringParserMalformed (462 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (462 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.MissingParen" end time: Feb 11 20:52 PST
"StringParserMalformed.MissingParen" time elapsed: 00:00:00
----------------------------------------------------------

107/110 Testing: StringParserMalformed.NestedParensWithoutOperator
107/110 Test: StringParserMalformed.NestedParensWithoutOperator
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.NestedParensWithoutOperator"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.NestedParensWithoutOperator" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.NestedParensWithoutOperator
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.NestedParensWithoutOperator
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedParensWithoutOperator/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/NestedParensWithoutOperator/output.txt
SUCCESS: "(dog + eats(man))" was correctly detected as Malformed
[       OK ] StringParserMalformed.NestedParensWithoutOperator (457 ms)
[----------] 1 test from StringParserMalformed (457 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (457 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.NestedParensWithoutOperator" end time: Feb 11 20:52 PST
"StringParserMalformed.NestedParensWithoutOperator" time elapsed: 00:00:00
----------------------------------------------------------

108/110 Testing: StringParserMalformed.ExtraParen
108/110 Test: StringParserMalformed.ExtraParen
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.ExtraParen"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.ExtraParen" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.ExtraParen
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.ExtraParen
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/ExtraParen/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/ExtraParen/output.txt
SUCCESS: "(seems + (un + bala + (nc +    ed))))" was correctly detected as Malformed
[       OK ] StringParserMalformed.ExtraParen (467 ms)
[----------] 1 test from StringParserMalformed (467 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (467 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.ExtraParen" end time: Feb 11 20:52 PST
"StringParserMalformed.ExtraParen" time elapsed: 00:00:00
----------------------------------------------------------

109/110 Testing: StringParserMalformed.Smiley
109/110 Test: StringParserMalformed.Smiley
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserMalformed.Smiley"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserMalformed.Smiley" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserMalformed.Smiley
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserMalformed
[ RUN      ] StringParserMalformed.Smiley
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Smiley/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/Smiley/output.txt
SUCCESS: ":)" was correctly detected as Malformed
[       OK ] StringParserMalformed.Smiley (454 ms)
[----------] 1 test from StringParserMalformed (454 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (454 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.46 sec
----------------------------------------------------------
Test Passed.
"StringParserMalformed.Smiley" end time: Feb 11 20:52 PST
"StringParserMalformed.Smiley" time elapsed: 00:00:00
----------------------------------------------------------

110/110 Testing: StringParserStress.LargeString
110/110 Test: StringParserStress.LargeString
Command: "/home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/stringparser_tests" "--gtest_filter=StringParserStress.LargeString"
Directory: /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests
"StringParserStress.LargeString" start time: Feb 11 20:52 PST
Output:
----------------------------------------------------------
Running main() from gtest_main.cc
Note: Google Test filter = StringParserStress.LargeString
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from StringParserStress
[ RUN      ] StringParserStress.LargeString
This test is executing your program with the following command line: 
/usr/bin/valgrind --tool=memcheck -q --leak-check=yes --error-exitcode=113 /home/cs104/cs104_test/hw3/stringparser /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/LargeString/input.txt /home/cs104/cs104_test/hw3/hw3_check/stringparser_tests/testFiles/LargeString/output.txt
SUCCESS: ">cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb" was correctly parsed to "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
[       OK ] StringParserStress.LargeString (468 ms)
[----------] 1 test from StringParserStress (468 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (468 ms total)
[  PASSED  ] 1 test.
<end of output>
Test time =   0.47 sec
----------------------------------------------------------
Test Passed.
"StringParserStress.LargeString" end time: Feb 11 20:52 PST
"StringParserStress.LargeString" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Feb 11 20:52 PST
